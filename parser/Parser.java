/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ACodePrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAblocobloco1Bloco */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAblocobloco2Bloco */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAblocobloco3Bloco */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAblocobloco4Bloco */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AInicialize */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAtipodeclaracao1Declaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AAtipodeclaracao2Declaracao */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AAunaltdeclaracao1Declaracao */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AAunaltdeclaracao2Declaracao */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AMultiVar */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AMultiExp */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AMultiId */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AMultiPos */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AIntegerTipoBase */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce ARealTipoBase */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce ASymbolTipoBase */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AVectorTipo */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AAddPosAddPos */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AIdVar */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list, false);
            }
            break;
            case 21: /* reduce AIdposVar */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list, false);
            }
            break;
            case 22: /* reduce AVarUnalt */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list, false);
            }
            break;
            case 23: /* reduce AValor */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list, false);
            }
            break;
            case 24: /* reduce ACaractereValor */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list, false);
            }
            break;
            case 25: /* reduce ANumeroValor */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list, false);
            }
            break;
            case 26: /* reduce ARealValor */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list, false);
            }
            break;
            case 27: /* reduce APalavraValor */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce ACpyComando */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list, false);
            }
            break;
            case 29: /* reduce AConstComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce AAcapturecomando1Comando */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AAcapturecomando2Comando */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AAshowcomando1Comando */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce AAshowcomando2Comando */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AAincasethatcomando1Comando */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list, false);
            }
            break;
            case 35: /* reduce AAincasethatcomando2Comando */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce AAsLongAsComando */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list, false);
            }
            break;
            case 37: /* reduce AConsideringComando */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list, false);
            }
            break;
            case 38: /* reduce ABlocoComando */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list, false);
            }
            break;
            case 39: /* reduce AFatorExp */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce ASomaExp */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list, false);
            }
            break;
            case 41: /* reduce ASubtracaoExp */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list, false);
            }
            break;
            case 42: /* reduce ARecExp */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list, false);
            }
            break;
            case 43: /* reduce ARecConstExp */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list, false);
            }
            break;
            case 44: /* reduce AMaiorExp */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list, false);
            }
            break;
            case 45: /* reduce AMenorExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(15), list, false);
            }
            break;
            case 46: /* reduce ANegacaoExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(15), list, false);
            }
            break;
            case 47: /* reduce AEExp */
            {
                ArrayList<Object> list = new47();
                push(goTo(15), list, false);
            }
            break;
            case 48: /* reduce AOuExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(15), list, false);
            }
            break;
            case 49: /* reduce AIgualExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(15), list, false);
            }
            break;
            case 50: /* reduce AMaiorigualExp */
            {
                ArrayList<Object> list = new50();
                push(goTo(15), list, false);
            }
            break;
            case 51: /* reduce AMenorigualExp */
            {
                ArrayList<Object> list = new51();
                push(goTo(15), list, false);
            }
            break;
            case 52: /* reduce ADiferenteExp */
            {
                ArrayList<Object> list = new52();
                push(goTo(15), list, false);
            }
            break;
            case 53: /* reduce ATermoFator */
            {
                ArrayList<Object> list = new53();
                push(goTo(16), list, false);
            }
            break;
            case 54: /* reduce AMultiplicacaoFator */
            {
                ArrayList<Object> list = new54();
                push(goTo(16), list, false);
            }
            break;
            case 55: /* reduce ADivisaoFator */
            {
                ArrayList<Object> list = new55();
                push(goTo(16), list, false);
            }
            break;
            case 56: /* reduce AModuloFator */
            {
                ArrayList<Object> list = new56();
                push(goTo(16), list, false);
            }
            break;
            case 57: /* reduce AValorTermo */
            {
                ArrayList<Object> list = new57();
                push(goTo(17), list, false);
            }
            break;
            case 58: /* reduce AVarTermo */
            {
                ArrayList<Object> list = new58();
                push(goTo(17), list, false);
            }
            break;
            case 59: /* reduce AParTermo */
            {
                ArrayList<Object> list = new59();
                push(goTo(17), list, false);
            }
            break;
            case 60: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new60();
                push(goTo(18), list, true);
            }
            break;
            case 61: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new61();
                push(goTo(18), list, true);
            }
            break;
            case 62: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new62();
                push(goTo(19), list, true);
            }
            break;
            case 63: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new63();
                push(goTo(19), list, true);
            }
            break;
            case 64: /* reduce ATerminal$MultiId */
            {
                ArrayList<Object> list = new64();
                push(goTo(20), list, true);
            }
            break;
            case 65: /* reduce ANonTerminal$MultiId */
            {
                ArrayList<Object> list = new65();
                push(goTo(20), list, true);
            }
            break;
            case 66: /* reduce ATerminal$MultiPos */
            {
                ArrayList<Object> list = new66();
                push(goTo(21), list, true);
            }
            break;
            case 67: /* reduce ANonTerminal$MultiPos */
            {
                ArrayList<Object> list = new67();
                push(goTo(21), list, true);
            }
            break;
            case 68: /* reduce ATerminal$AddPos */
            {
                ArrayList<Object> list = new68();
                push(goTo(22), list, true);
            }
            break;
            case 69: /* reduce ANonTerminal$AddPos */
            {
                ArrayList<Object> list = new69();
                push(goTo(22), list, true);
            }
            break;
            case 70: /* reduce ATerminal$MultiVar */
            {
                ArrayList<Object> list = new70();
                push(goTo(23), list, true);
            }
            break;
            case 71: /* reduce ANonTerminal$MultiVar */
            {
                ArrayList<Object> list = new71();
                push(goTo(23), list, true);
            }
            break;
            case 72: /* reduce ATerminal$MultiExp */
            {
                ArrayList<Object> list = new72();
                push(goTo(24), list, true);
            }
            break;
            case 73: /* reduce ANonTerminal$MultiExp */
            {
                ArrayList<Object> list = new73();
                push(goTo(24), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ACodePrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TCode tcodeNode2;
        TId tidNode3;
        PBloco pblocoNode4;
        tcodeNode2 = (TCode)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pblocoNode4 = (PBloco)nodeArrayList3.get(0);

        pprogramaNode1 = new ACodePrograma(tcodeNode2, tidNode3, pblocoNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAblocobloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TStart tstartNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TFinish tfinishNode5;
        tstartNode2 = (TStart)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tfinishNode5 = (TFinish)nodeArrayList2.get(0);

        pblocoNode1 = new ABlocoBloco(tstartNode2, listNode3, listNode4, tfinishNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAblocobloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TStart tstartNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFinish tfinishNode6;
        tstartNode2 = (TStart)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        tfinishNode6 = (TFinish)nodeArrayList3.get(0);

        pblocoNode1 = new ABlocoBloco(tstartNode2, listNode4, listNode5, tfinishNode6);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAblocobloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TStart tstartNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFinish tfinishNode6;
        tstartNode2 = (TStart)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tfinishNode6 = (TFinish)nodeArrayList3.get(0);

        pblocoNode1 = new ABlocoBloco(tstartNode2, listNode3, listNode5, tfinishNode6);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAblocobloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TStart tstartNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TFinish tfinishNode7;
        tstartNode2 = (TStart)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tfinishNode7 = (TFinish)nodeArrayList4.get(0);

        pblocoNode1 = new ABlocoBloco(tstartNode2, listNode4, listNode6, tfinishNode7);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AInicialize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInicialize pinicializeNode1;
        {
            // Block
        TRecebeConst trecebeconstNode2;
        PValor pvalorNode3;
        trecebeconstNode2 = (TRecebeConst)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);

        pinicializeNode1 = new AInicialize(trecebeconstNode2, pvalorNode3);
        }
	nodeList.add(pinicializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAtipodeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TId tidNode4;
        TPpv tppvNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tppvNode5 = (TPpv)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new ATipoDeclaracao(ptipoNode2, listNode3, tidNode4, tppvNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAtipodeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TId tidNode5;
        TPpv tppvNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tidNode5 = (TId)nodeArrayList3.get(0);
        tppvNode6 = (TPpv)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new ATipoDeclaracao(ptipoNode2, listNode4, tidNode5, tppvNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAunaltdeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PUnalt punaltNode2;
        PTipo ptipoNode3;
        TId tidNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TPpv tppvNode6;
        punaltNode2 = (PUnalt)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tppvNode6 = (TPpv)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AUnaltDeclaracao(punaltNode2, ptipoNode3, tidNode4, null, tppvNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAunaltdeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PUnalt punaltNode2;
        PTipo ptipoNode3;
        TId tidNode4;
        PInicialize pinicializeNode5;
        TPpv tppvNode6;
        punaltNode2 = (PUnalt)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        pinicializeNode5 = (PInicialize)nodeArrayList4.get(0);
        tppvNode6 = (TPpv)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new AUnaltDeclaracao(punaltNode2, ptipoNode3, tidNode4, pinicializeNode5, tppvNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMultiVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiVar pmultivarNode1;
        {
            // Block
        PVar pvarNode2;
        TVir tvirNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tvirNode3 = (TVir)nodeArrayList2.get(0);

        pmultivarNode1 = new AMultiVar(pvarNode2, tvirNode3);
        }
	nodeList.add(pmultivarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMultiExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiExp pmultiexpNode1;
        {
            // Block
        PExp pexpNode2;
        TVir tvirNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tvirNode3 = (TVir)nodeArrayList2.get(0);

        pmultiexpNode1 = new AMultiExp(pexpNode2, tvirNode3);
        }
	nodeList.add(pmultiexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AMultiId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiId pmultiidNode1;
        {
            // Block
        TId tidNode2;
        TVir tvirNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tvirNode3 = (TVir)nodeArrayList2.get(0);

        pmultiidNode1 = new AMultiId(tidNode2, tvirNode3);
        }
	nodeList.add(pmultiidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMultiPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiPos pmultiposNode1;
        {
            // Block
        TLCol tlcolNode2;
        PExp pexpNode3;
        TRCol trcolNode4;
        tlcolNode2 = (TLCol)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trcolNode4 = (TRCol)nodeArrayList3.get(0);

        pmultiposNode1 = new AMultiPos(tlcolNode2, pexpNode3, trcolNode4);
        }
	nodeList.add(pmultiposNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIntegerTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptipobaseNode1 = new AIntegerTipoBase(tintegerNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ARealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipobaseNode1 = new ARealTipoBase(trealNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASymbolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        ptipobaseNode1 = new ASymbolTipoBase(tsymbolNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVectorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        TVector tvectorNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);
        tvectorNode3 = (TVector)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        ptipoNode1 = new AVectorTipo(ptipobaseNode2, tvectorNode3, listNode5);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAddPosAddPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddPos paddposNode1;
        {
            // Block
        TLCol tlcolNode2;
        TNumber tnumberNode3;
        TRCol trcolNode4;
        tlcolNode2 = (TLCol)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);
        trcolNode4 = (TRCol)nodeArrayList3.get(0);

        paddposNode1 = new AAddPosAddPos(tlcolNode2, tnumberNode3, trcolNode4);
        }
	nodeList.add(paddposNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIdposVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvarNode1 = new AIdposVar(tidNode2, listNode4);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AVarUnalt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnalt punaltNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        punaltNode1 = new AVarUnalt(pvarNode2);
        }
	nodeList.add(punaltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PValor pvalorNode1;
        {
            // Block

        pvalorNode1 = new AValor();
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACaractereValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pvalorNode1 = new ACaractereValor(tcharNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ANumeroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalorNode1 = new ANumeroValor(tnumberNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(tfloatNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce APalavraValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new APalavraValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACpyComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TRecebe trecebeNode3;
        PExp pexpNode4;
        TPpv tppvNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        trecebeNode3 = (TRecebe)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tppvNode5 = (TPpv)nodeArrayList4.get(0);

        pcomandoNode1 = new ACpyComando(pvarNode2, trecebeNode3, pexpNode4, tppvNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AConstComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PUnalt punaltNode2;
        TRecebeConst trecebeconstNode3;
        TPpv tppvNode4;
        punaltNode2 = (PUnalt)nodeArrayList1.get(0);
        trecebeconstNode3 = (TRecebeConst)nodeArrayList2.get(0);
        tppvNode4 = (TPpv)nodeArrayList3.get(0);

        pcomandoNode1 = new AConstComando(punaltNode2, trecebeconstNode3, tppvNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAcapturecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TCapture tcaptureNode2;
        TLPar tlparNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PVar pvarNode5;
        TRPar trparNode6;
        TPpv tppvNode7;
        tcaptureNode2 = (TCapture)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        }
        pvarNode5 = (PVar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tppvNode7 = (TPpv)nodeArrayList5.get(0);

        pcomandoNode1 = new ACaptureComando(tcaptureNode2, tlparNode3, listNode4, pvarNode5, trparNode6, tppvNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAcapturecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TCapture tcaptureNode2;
        TLPar tlparNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PVar pvarNode6;
        TRPar trparNode7;
        TPpv tppvNode8;
        tcaptureNode2 = (TCapture)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pvarNode6 = (PVar)nodeArrayList4.get(0);
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        tppvNode8 = (TPpv)nodeArrayList6.get(0);

        pcomandoNode1 = new ACaptureComando(tcaptureNode2, tlparNode3, listNode5, pvarNode6, trparNode7, tppvNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAshowcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TShow tshowNode2;
        TLPar tlparNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExp pexpNode5;
        TRPar trparNode6;
        TPpv tppvNode7;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        }
        pexpNode5 = (PExp)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tppvNode7 = (TPpv)nodeArrayList5.get(0);

        pcomandoNode1 = new AShowComando(tshowNode2, tlparNode3, listNode4, pexpNode5, trparNode6, tppvNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAshowcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TShow tshowNode2;
        TLPar tlparNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PExp pexpNode6;
        TRPar trparNode7;
        TPpv tppvNode8;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pexpNode6 = (PExp)nodeArrayList4.get(0);
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        tppvNode8 = (TPpv)nodeArrayList6.get(0);

        pcomandoNode1 = new AShowComando(tshowNode2, tlparNode3, listNode5, pexpNode6, trparNode7, tppvNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAincasethatcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIn tinNode2;
        TCase tcaseNode3;
        TThat tthatNode4;
        TLPar tlparNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        TDo tdoNode8;
        PComando pcomandoNode9;
        @SuppressWarnings("unused") Object nullNode10 = null;
        PComando pcomandoNode11;
        tinNode2 = (TIn)nodeArrayList1.get(0);
        tcaseNode3 = (TCase)nodeArrayList2.get(0);
        tthatNode4 = (TThat)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tdoNode8 = (TDo)nodeArrayList7.get(0);
        pcomandoNode9 = (PComando)nodeArrayList8.get(0);
        pcomandoNode11 = (PComando)nodeArrayList9.get(0);

        pcomandoNode1 = new AInCaseThatComando(tinNode2, tcaseNode3, tthatNode4, tlparNode5, pexpNode6, trparNode7, tdoNode8, pcomandoNode9, null, pcomandoNode11);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAincasethatcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIn tinNode2;
        TCase tcaseNode3;
        TThat tthatNode4;
        TLPar tlparNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        TDo tdoNode8;
        PComando pcomandoNode9;
        TElse telseNode10;
        PComando pcomandoNode11;
        tinNode2 = (TIn)nodeArrayList1.get(0);
        tcaseNode3 = (TCase)nodeArrayList2.get(0);
        tthatNode4 = (TThat)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tdoNode8 = (TDo)nodeArrayList7.get(0);
        pcomandoNode9 = (PComando)nodeArrayList8.get(0);
        telseNode10 = (TElse)nodeArrayList9.get(0);
        pcomandoNode11 = (PComando)nodeArrayList10.get(0);

        pcomandoNode1 = new AInCaseThatComando(tinNode2, tcaseNode3, tthatNode4, tlparNode5, pexpNode6, trparNode7, tdoNode8, pcomandoNode9, telseNode10, pcomandoNode11);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAsLongAsComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TAs tasNode2;
        TLong tlongNode3;
        TAs tasNode4;
        TLPar tlparNode5;
        PExp pexpNode6;
        TRPar trparNode7;
        TDo tdoNode8;
        PComando pcomandoNode9;
        tasNode2 = (TAs)nodeArrayList1.get(0);
        tlongNode3 = (TLong)nodeArrayList2.get(0);
        tasNode4 = (TAs)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);
        tdoNode8 = (TDo)nodeArrayList7.get(0);
        pcomandoNode9 = (PComando)nodeArrayList8.get(0);

        pcomandoNode1 = new AAsLongAsComando(tasNode2, tlongNode3, tasNode4, tlparNode5, pexpNode6, trparNode7, tdoNode8, pcomandoNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AConsideringComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TConsidering tconsideringNode2;
        PVar pvarNode3;
        TFrom tfromNode4;
        PExp pexpNode5;
        TTo ttoNode6;
        PExp pexpNode7;
        TBy tbyNode8;
        PExp pexpNode9;
        TDo tdoNode10;
        PComando pcomandoNode11;
        tconsideringNode2 = (TConsidering)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tfromNode4 = (TFrom)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        ttoNode6 = (TTo)nodeArrayList5.get(0);
        pexpNode7 = (PExp)nodeArrayList6.get(0);
        tbyNode8 = (TBy)nodeArrayList7.get(0);
        pexpNode9 = (PExp)nodeArrayList8.get(0);
        tdoNode10 = (TDo)nodeArrayList9.get(0);
        pcomandoNode11 = (PComando)nodeArrayList10.get(0);

        pcomandoNode1 = new AConsideringComando(tconsideringNode2, pvarNode3, tfromNode4, pexpNode5, ttoNode6, pexpNode7, tbyNode8, pexpNode9, tdoNode10, pcomandoNode11);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ABlocoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pcomandoNode1 = new ABlocoComando(pblocoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AFatorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        pexpNode1 = new AFatorExp(pfatorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TPlus tplusNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, tplusNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ASubtracaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMinus tminusNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ASubtracaoExp(pexpNode2, tminusNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ARecExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TRecebe trecebeNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        trecebeNode3 = (TRecebe)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ARecExp(pexpNode2, trecebeNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ARecConstExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TRecebeConst trecebeconstNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        trecebeconstNode3 = (TRecebeConst)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ARecConstExp(pexpNode2, trecebeconstNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMaiorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TGreater tgreaterNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgreaterNode3 = (TGreater)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorExp(pexpNode2, tgreaterNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMenorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TLesser tlesserNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tlesserNode3 = (TLesser)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new AMenorExp(pexpNode2, tlesserNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ANegacaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TNot tnotNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tnotNode3 = (TNot)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ANegacaoExp(pexpNode2, tnotNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AEExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TAnd tandNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new AEExp(pexpNode2, tandNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOr torNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, torNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TTwoequal ttwoequalNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        ttwoequalNode3 = (TTwoequal)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new AIgualExp(pexpNode2, ttwoequalNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMaiorigualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TGoe tgoeNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tgoeNode3 = (TGoe)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorigualExp(pexpNode2, tgoeNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMenorigualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TLoe tloeNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tloeNode3 = (TLoe)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new AMenorigualExp(pexpNode2, tloeNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ADiferenteExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TDiff tdiffNode3;
        PFator pfatorNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tdiffNode3 = (TDiff)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ADiferenteExp(pexpNode2, tdiffNode3, pfatorNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ATermoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pfatorNode1 = new ATermoFator(ptermoNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMultiplicacaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TMult tmultNode3;
        PTermo ptermoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new AMultiplicacaoFator(pfatorNode2, tmultNode3, ptermoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ADivisaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TDiv tdivNode3;
        PTermo ptermoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new ADivisaoFator(pfatorNode2, tdivNode3, ptermoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AModuloFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TMod tmodNode3;
        PTermo ptermoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new AModuloFator(pfatorNode2, tmodNode3, ptermoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AValorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        ptermoNode1 = new AValorTermo(pvalorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AVarTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        ptermoNode1 = new AVarTermo(pvarNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AParTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        TLPar tlparNode2;
        PExp pexpNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermoNode1 = new AParTermo(tlparNode2, pexpNode3, trparNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$MultiId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiId pmultiidNode1;
        pmultiidNode1 = (PMultiId)nodeArrayList1.get(0);
	if(pmultiidNode1 != null)
	{
	  listNode2.add(pmultiidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$MultiId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiId pmultiidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultiidNode2 = (PMultiId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultiidNode2 != null)
	{
	  listNode3.add(pmultiidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$MultiPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiPos pmultiposNode1;
        pmultiposNode1 = (PMultiPos)nodeArrayList1.get(0);
	if(pmultiposNode1 != null)
	{
	  listNode2.add(pmultiposNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$MultiPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiPos pmultiposNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultiposNode2 = (PMultiPos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultiposNode2 != null)
	{
	  listNode3.add(pmultiposNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$AddPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAddPos paddposNode1;
        paddposNode1 = (PAddPos)nodeArrayList1.get(0);
	if(paddposNode1 != null)
	{
	  listNode2.add(paddposNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$AddPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAddPos paddposNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paddposNode2 = (PAddPos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paddposNode2 != null)
	{
	  listNode3.add(paddposNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ATerminal$MultiVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiVar pmultivarNode1;
        pmultivarNode1 = (PMultiVar)nodeArrayList1.get(0);
	if(pmultivarNode1 != null)
	{
	  listNode2.add(pmultivarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANonTerminal$MultiVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiVar pmultivarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultivarNode2 = (PMultiVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultivarNode2 != null)
	{
	  listNode3.add(pmultivarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ATerminal$MultiExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiExp pmultiexpNode1;
        pmultiexpNode1 = (PMultiExp)nodeArrayList1.get(0);
	if(pmultiexpNode1 != null)
	{
	  listNode2.add(pmultiexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ANonTerminal$MultiExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiExp pmultiexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultiexpNode2 = (PMultiExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultiexpNode2 != null)
	{
	  listNode3.add(pmultiexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {4, SHIFT, 1}, },
			{{-1, ERROR, 1}, {46, SHIFT, 3}, },
			{{-1, ERROR, 2}, {51, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {5, SHIFT, 4}, },
			{{-1, ERROR, 4}, {0, SHIFT, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, {5, SHIFT, 4}, {6, SHIFT, 9}, {8, SHIFT, 10}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 10}, {9, SHIFT, 25}, },
			{{-1, ERROR, 11}, {14, SHIFT, 26}, },
			{{-1, ERROR, 12}, {46, SHIFT, 15}, },
			{{-1, ERROR, 13}, {38, SHIFT, 28}, },
			{{-1, ERROR, 14}, {38, SHIFT, 29}, },
			{{-1, REDUCE, 20}, {42, SHIFT, 30}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 17}, {3, SHIFT, 33}, },
			{{-1, ERROR, 19}, {46, SHIFT, 34}, },
			{{-1, REDUCE, 22}, {26, SHIFT, 37}, },
			{{-1, ERROR, 21}, {0, SHIFT, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, {27, SHIFT, 38}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 23}, {0, SHIFT, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, {5, SHIFT, 4}, {6, SHIFT, 40}, {8, SHIFT, 10}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, ERROR, 24}, {5, SHIFT, 4}, {6, SHIFT, 43}, {8, SHIFT, 10}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, ERROR, 25}, {10, SHIFT, 46}, },
			{{-1, ERROR, 26}, {13, SHIFT, 47}, },
			{{-1, ERROR, 27}, {16, SHIFT, 48}, },
			{{-1, ERROR, 28}, {46, SHIFT, 15}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, ERROR, 30}, {48, SHIFT, 64}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 21}, {42, SHIFT, 30}, },
			{{-1, ERROR, 33}, {42, SHIFT, 66}, },
			{{-1, ERROR, 34}, {44, SHIFT, 69}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 36}, {46, SHIFT, 71}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, ERROR, 38}, {44, SHIFT, 74}, },
			{{-1, ERROR, 39}, {46, SHIFT, 75}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 42}, {5, SHIFT, 4}, {6, SHIFT, 76}, {8, SHIFT, 10}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 44}, {27, SHIFT, 38}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 46}, {38, SHIFT, 77}, },
			{{-1, ERROR, 47}, {38, SHIFT, 78}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 50}, {39, SHIFT, 80}, {45, SHIFT, 81}, },
			{{-1, ERROR, 51}, {46, SHIFT, 15}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 60}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, {39, SHIFT, 98}, {45, SHIFT, 99}, },
			{{-1, REDUCE, 39}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, ERROR, 64}, {43, SHIFT, 105}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 18}, {42, SHIFT, 66}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 71}, {44, SHIFT, 108}, {45, SHIFT, 70}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 73}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, {44, SHIFT, 109}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 75}, {27, SHIFT, 110}, {44, SHIFT, 111}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, ERROR, 79}, {17, SHIFT, 115}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, },
			{{-1, ERROR, 80}, {44, SHIFT, 116}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 83}, {39, SHIFT, 117}, {45, SHIFT, 81}, },
			{{-1, ERROR, 84}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, {39, SHIFT, 118}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, ERROR, 98}, {44, SHIFT, 132}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 104}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, {39, SHIFT, 136}, {45, SHIFT, 99}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 106}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, {43, SHIFT, 137}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 23}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 112}, {44, SHIFT, 139}, },
			{{-1, ERROR, 113}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, {39, SHIFT, 140}, },
			{{-1, ERROR, 114}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, {39, SHIFT, 141}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 117}, {44, SHIFT, 143}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 40}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 41}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 42}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 43}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 44}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 45}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 46}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 47}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 48}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 49}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 50}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 51}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 52}, {23, SHIFT, 100}, {24, SHIFT, 101}, {25, SHIFT, 102}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 136}, {44, SHIFT, 144}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 140}, {11, SHIFT, 145}, },
			{{-1, ERROR, 141}, {11, SHIFT, 146}, },
			{{-1, ERROR, 142}, {18, SHIFT, 147}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 145}, {5, SHIFT, 4}, {8, SHIFT, 10}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, ERROR, 146}, {5, SHIFT, 4}, {8, SHIFT, 10}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, REDUCE, 23}, {38, SHIFT, 52}, {46, SHIFT, 15}, {47, SHIFT, 53}, {48, SHIFT, 54}, {49, SHIFT, 55}, {50, SHIFT, 56}, },
			{{-1, ERROR, 148}, {5, SHIFT, 4}, {8, SHIFT, 10}, {12, SHIFT, 151}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 150}, {11, SHIFT, 153}, {21, SHIFT, 85}, {22, SHIFT, 86}, {26, SHIFT, 87}, {27, SHIFT, 88}, {28, SHIFT, 89}, {29, SHIFT, 90}, {30, SHIFT, 91}, {31, SHIFT, 92}, {32, SHIFT, 93}, {34, SHIFT, 94}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, },
			{{-1, ERROR, 151}, {5, SHIFT, 4}, {8, SHIFT, 10}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 153}, {5, SHIFT, 4}, {8, SHIFT, 10}, {13, SHIFT, 11}, {15, SHIFT, 12}, {19, SHIFT, 13}, {20, SHIFT, 14}, {46, SHIFT, 15}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 16}, {3, 5}, },
			{{-1, 112}, },
			{{-1, 17}, {23, 41}, },
			{{-1, 49}, {51, 82}, },
			{{-1, 57}, {63, 103}, },
			{{-1, 35}, {36, 72}, },
			{{-1, 67}, {68, 107}, },
			{{-1, 18}, },
			{{-1, 19}, {21, 39}, },
			{{-1, 31}, {32, 65}, },
			{{-1, 58}, {4, 20}, {12, 27}, {23, 20}, {24, 20}, {28, 50}, {42, 20}, {51, 83}, {145, 20}, {146, 20}, {148, 20}, {151, 20}, {153, 20}, },
			{{-1, 44}, {4, 21}, {23, 21}, },
			{{-1, 59}, {110, 138}, },
			{{-1, 22}, {24, 45}, {42, 45}, {145, 148}, {146, 149}, {148, 152}, {151, 154}, {153, 155}, },
			{{-1, 60}, {37, 73}, {48, 79}, {52, 84}, {63, 104}, {66, 106}, {77, 113}, {78, 114}, {115, 142}, {147, 150}, },
			{{-1, 61}, {85, 119}, {86, 120}, {87, 121}, {88, 122}, {89, 123}, {90, 124}, {91, 125}, {92, 126}, {93, 127}, {94, 128}, {95, 129}, {96, 130}, {97, 131}, },
			{{-1, 62}, {100, 133}, {101, 134}, {102, 135}, },
			{{-1, 23}, },
			{{-1, 24}, {23, 42}, },
			{{-1, 36}, },
			{{-1, 68}, },
			{{-1, 32}, },
			{{-1, 51}, },
			{{-1, 63}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'code'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'start'",
			"expecting: 'real', 'integer', 'symbol', 'start', 'finish', 'in', 'as', 'considering', 'capture', 'show', id",
			"expecting: 'vector ', id",
			"expecting: 'start', 'finish', 'in', 'else', 'as', 'considering', 'capture', 'show', id, EOF",
			"expecting: 'case'",
			"expecting: 'long'",
			"expecting: '('",
			"expecting: 'real', 'integer', 'symbol', 'do', 'from', 'to', 'by', '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, ')', '[', ']', ';', ','",
			"expecting: 'start', 'finish', 'in', 'else', 'as', 'considering', 'capture', 'show', id",
			"expecting: 'real', 'integer', 'symbol', recebe, '='",
			"expecting: 'real', 'integer', 'symbol', '='",
			"expecting: 'start', 'finish', 'in', 'as', 'considering', 'capture', 'show', id",
			"expecting: 'that'",
			"expecting: 'as'",
			"expecting: 'from'",
			"expecting: '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, '(', ')', ',', id, char, number, string, float",
			"expecting: number",
			"expecting: '['",
			"expecting: ';', ','",
			"expecting: '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, '(', ';', id, char, number, string, float",
			"expecting: ';'",
			"expecting: '='",
			"expecting: 'to', '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, '(', id, char, number, string, float",
			"expecting: ')', ','",
			"expecting: '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, '(', ')', id, char, number, string, float",
			"expecting: 'do', 'to', 'by', '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, ')', ']', ';', ','",
			"expecting: '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, ')', ','",
			"expecting: ']'",
			"expecting: '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, '(', ']', id, char, number, string, float",
			"expecting: '[', id",
			"expecting: '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, ';'",
			"expecting: '=', ';'",
			"expecting: 'to', '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff",
			"expecting: '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, ')'",
			"expecting: 'do', 'to', 'by', '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, '(', ')', ']', ';', ',', id, char, number, string, float",
			"expecting: '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, ']'",
			"expecting: ';', char, number, string, float",
			"expecting: 'by', '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, '(', id, char, number, string, float",
			"expecting: 'do'",
			"expecting: 'by', '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff",
			"expecting: 'start', 'in', 'as', 'considering', 'capture', 'show', id",
			"expecting: 'do', '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff, '(', id, char, number, string, float",
			"expecting: 'start', 'in', 'else', 'as', 'considering', 'capture', 'show', id",
			"expecting: 'do', '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', twoequal, goe, loe, diff",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 5, 5, 6, 7, 8, 1, 9, 9, 10, 11, 4, 5, 1, 12, 13, 14, 4, 14, 15, 16, 17, 1, 18, 19, 10, 10, 20, 21, 1, 1, 22, 23, 1, 6, 4, 14, 6, 24, 14, 9, 9, 25, 1, 26, 1, 27, 28, 28, 28, 28, 18, 28, 28, 29, 28, 28, 18, 30, 10, 31, 32, 32, 4, 1, 21, 1, 33, 11, 34, 6, 27, 27, 35, 23, 1, 1, 26, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 23, 18, 37, 37, 37, 18, 29, 10, 38, 32, 4, 11, 39, 4, 23, 36, 36, 40, 11, 23, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 11, 28, 28, 28, 23, 32, 23, 4, 41, 41, 42, 11, 11, 43, 43, 44, 45, 11, 46, 43, 11, 43, 11, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

Package calculadora;

Helpers
 digito = ['0' .. '9'];
 letra_min = ['a' .. 'z'];
 letra_mai = ['A' .. 'Z'];
 ascii = [0x0000..0xFFFF];
 ascii1 = [0x0000..0x0021];
 ascii2 = [0x0023..0xFFFF];
 binary = [0 .. 1];
 espaco = ' ';
 tab = '	';
 rc = 13;
 nl = 10;
 aspas = ''';
 aspas_duplas = '"';

Tokens
 real = 'real';
 integer = 'integer';
 symbol = 'symbol';
 vector = 'vector';
 code = 'code';
 start = 'start';
 finish = 'finish';
 unalterable = 'unalterable';
 in = 'in';
 case = 'case';
 that = 'that';
 do = 'do';
 else = 'else';
 as = 'as';
 long = 'long';
 considering = 'considering';
 from = 'from';
 to = 'to';
 by = 'by';
 capture = 'capture';
 show = 'show';
 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 mod = '%';
 recebe = (':')('=');
 recebe_const = '=';
 greater = '>';
 lesser = '<';
 not = '!';
 and = 'and';
 or = 'or';
 xor = 'xor';
 twoequal = ('=')('=');
 goe = ('>')('=');
 loe = ('<')('=');
 diff = ('!')('=');
 l_par = '(';
 r_par = ')';
 l_com = '{';
 r_com = '}';
 l_col = '[';
 r_col = ']';
 ppv = ';';
 vir = ',';
 id = (letra_min|letra_mai)(letra_min|letra_mai|'_')*;
 char = (aspas)(ascii)(aspas);
 number = (digito+)|(('b')(digito+));
 string = aspas_duplas(ascii1|ascii2)*aspas_duplas;
 float = (digito+)'.'(digito+);
 blank = (espaco | rc | nl | tab)+;
 comment = ('{')(ascii)*('}'); 

Ignored Tokens
 blank,
 comment;

Productions

programa {-> programa} = {programa} code id bloco {-> New programa.programa(id,bloco)};

bloco {-> bloco} =
    {bloco} start declaracao* comando* finish {-> New bloco.bloco([declaracao], [comando])};

declaracao {-> declaracao} =
     {tipo} tipo multi_id* id ppv {-> New declaracao.declaracao(tipo, [multi_id.id,id])}
    |{unalt} unalterable tipo id  ppv {-> New declaracao.unalt(tipo,id)}
    |{unalt_inicialized} unalterable tipo id recebe_const minus? valor ppv {-> New declaracao.unalt_inicialized(tipo,id,minus,valor)};

//auxiliares
multi_var {-> var} = {multi_var} var vir {-> var}; 
multi_exp {-> exp} = {multi_exp} exp vir {-> exp};

multi_id {-> id} = {multi_id} id vir {->id};
multi_pos {-> exp } = {multi_pos} l_col exp r_col {-> exp}; 

tipo_base {-> tipo_base} =
     {integer} integer {-> New tipo_base.integer(integer)}
    |{real} real {-> New tipo_base.real(real)}
    |{symbol} symbol {-> New tipo_base.symbol(symbol)};

tipo {-> tipo} =
     {tipo_base} tipo_base {-> New tipo.tipo_base(tipo_base)}
    |{vector} tipo_base vector multi_pos+ {-> New tipo.vector(tipo_base, [multi_pos.exp])};
      
add_pos {-> exp} =
     {add_pos} l_col exp r_col {-> exp};

increment_pos {-> number} =
     {increment_pos} l_col number r_col {-> number};

var {-> var} = 
       {id} id {-> New var.id(id)}
      |{var_idpos} id add_pos+ {-> New var.var_idpos(id,[add_pos.exp])};
      //|{increment_pos} id increment_pos+ {-> New var.increment_pos(id,[increment_pos.number])};
      

unalt {-> unalt} =
      {id} id {-> New unalt.id(id)}
     |{unalt_idpos} id add_pos+ {-> New unalt.unalt_idpos(id,[add_pos.exp])};
    // |{increment_pos} id increment_pos+ {-> New unalt.increment_pos(id,[increment_pos.number])};

valor {-> valor} =
    {caractere} char {-> New valor.caractere(char)}
    |{numero} number {-> New valor.numero(number)}
    |{real} float {-> New valor.real(float)}
    |{palavra} string {-> New valor.palavra(string)};

cmd {-> cmd} = 
     {cpy} var recebe exp ppv {-> New cmd.cpy(var,exp)}
    |{const} unalt recebe_const exp ppv {-> New cmd.const(unalt,exp)}
    |{capture} capture l_par multi_var* var r_par ppv {-> New cmd.capture([multi_var.var,var.var])}
    |{show} show l_par multi_exp* exp r_par ppv  {-> New cmd.show([multi_exp.exp,exp.exp])}
    |{as_long_as} [as1]:as long [as2]:as l_par exp r_par do cmd {-> New cmd.as_long_as(exp, cmd)}
    |{considering} considering [var]:var from [exp1]:exp to [exp2]:exp by [exp3]:exp do cmd {-> New cmd.considering(var.var,exp1.exp,exp2.exp,exp3.exp,cmd)}
    |{bloco} bloco {-> New cmd.bloco(bloco)};
 
otherwise {-> otherwise} = {else} else cmd {-> New otherwise.else(cmd)};

comando {-> comando} = 
     {cmd} cmd {-> New comando.cmd(cmd)}
    |{if} in case that l_par [exp]:exp r_par do cmd otherwise? {-> New comando.if(exp.exp,cmd,otherwise)};
 
exp {-> exp} =
     {fator} fator {-> fator.exp}
    |{soma} [left]:exp plus [right]:fator              {-> New exp.soma(left.exp,right.exp)}
    |{subtracao} [left]:exp minus [right]:fator        {-> New exp.subtr(left.exp,right.exp)}  
    |{ou} [left]:exp or [right]:fator                  {-> New exp.ou(left.exp,right.exp)}
    |{xou} [left]:exp xor [right]:fator                {-> New exp.xou(left.exp,right.exp)}
    |{e} [left]:exp and [right]:fator                  {-> New exp.e(left.exp,right.exp)}
    |{rec} [left]:exp recebe [right]:fator             {-> New exp.rec(left.exp,right.exp)}
    |{rec_const} [left]:exp recebe_const [right]:fator {-> New exp.rec_const(left.exp,right.exp)} 
    |{maior} [left]:exp greater [right]:fator          {-> New exp.maior(left.exp,right.exp)}
    |{menor} [left]:exp lesser[right]:fator            {-> New exp.menor(left.exp,right.exp)}
    |{igual} [left]:exp twoequal [right]:fator         {-> New exp.igual(left.exp,right.exp)}
    |{maior_ou_igual} [left]:exp goe [right]:fator     {-> New exp.maior_ou_igual(left.exp,right.exp)}
    |{menor_ou_igual} [left]:exp loe [right]:fator     {-> New exp.menor_ou_igual(left.exp,right.exp)}
    |{diff} [left]:exp diff [right]:fator              {-> New exp.diff(left.exp,right.exp)};

fator {-> exp} =
     {termo} termo {-> termo.exp}
    |{multi} [left]:fator mult [right]:termo  {-> New exp.multi(left.exp, right.exp)}
    |{div} [left]:fator div [right]:termo {-> New exp.div(left.exp, right.exp)}
    |{mod} [left]:fator mod [right]:termo  {-> New exp.mod(left.exp, right.exp)};
    
termo {-> exp} =
     {valor}  valor                  {-> New exp.valor(valor)}
    |{var}  var                      {-> New exp.var(var)}
    |{negativo} minus [right]:termo  {-> New exp.negativo(minus,right.exp)}
    |{negacao} not [right]:termo       {-> New exp.negacao(right.exp)}
    |{par} l_par exp r_par           {-> exp};
 

Abstract Syntax Tree

programa = {programa} [name]:id bloco;

bloco = {bloco} declaracao* comando*;
 
declaracao = 
     {declaracao} tipo [id_list]:id+  
    |{unalt} tipo id
    |{unalt_inicialized} tipo id minus? valor; 

tipo_base = 
     {integer} integer
    |{real} real
    |{symbol} symbol;

tipo = 
     {vector} tipo_base [multi_pos]:exp+
    |{tipo_base} tipo_base;
 
var = 
     {id} id
    |{var_idpos} id [add_pos]:exp+;
  //  |{increment_pos} id [increment_pos]:number+;

unalt = 
     {id} id
    |{unalt_idpos} id [add_pos]:exp+;
   // |{increment_pos} id [increment_pos]:number+;

valor =
     {caractere} char
    |{numero} number
    |{real} float
    |{palavra} string; 
 
cmd =
     {cpy} var exp
    |{const} unalt exp
    |{capture} [multi_var]:var+
    |{show} [multi_exp]:exp+
    |{as_long_as} exp cmd
    |{considering} var [exp1]:exp [exp2]:exp [exp3]:exp cmd
    |{bloco} bloco;

otherwise = {else} cmd;

comando = 
     {cmd} cmd
    |{if} exp cmd otherwise?;

exp =  
    {valor} valor
    |{var} var
    |{negativo} minus [right]:exp
    |{par} exp 
    |{negacao} [right]:exp
    |{multi} [left]:exp [right]:exp 
    |{div} [left]:exp [right]:exp 
    |{mod} [left]:exp [right]:exp
    |{soma} [left]:exp [right]:exp
    |{subtr} [left]:exp [right]:exp 
    |{ou} [left]:exp [right]:exp
    |{xou} [left]:exp [right]:exp
    |{e} [left]:exp [right]:exp
    |{rec} [left]:exp [right]:exp
    |{rec_const} [left]:exp [right]:exp
    |{maior} [left]:exp [right]:exp
    |{menor} [left]:exp [right]:exp
    |{igual} [left]:exp [right]:exp
    |{maior_ou_igual} [left]:exp [right]:exp     
    |{menor_ou_igual} [left]:exp [right]:exp     
    |{diff} [left]:exp [right]:exp; 

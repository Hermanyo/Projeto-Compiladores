Package calculadora;

Helpers
 digito = ['0' .. '9'];
 letra_min = ['a' .. 'z'];
 letra_mai = ['A' .. 'Z'];
 ascii = [0x0000..0xFFFF];
 ascii1 = [0x0000..0x0021];
 ascii2 = [0x0023..0xFFFF];
 binary = [0 .. 1];
 espaco = ' ';
 tab = '	';
 rc = 13;
 nl = 10;
 aspas = ''';
 aspas_duplas = '"';

Tokens
 real = 'real';
 integer = 'integer';
 symbol = 'symbol';
 vector = 'vector';
 code = 'code';
 start = 'start';
 finish = 'finish';
 unalterable = 'unalterable';
 in = 'in';
 case = 'case';
 that = 'that';
 do = 'do';
 else = 'else';
 as = 'as';
 long = 'long';
 considering = 'considering';
 from = 'from';
 to = 'to';
 by = 'by';
 capture = 'capture';
 show = 'show';
 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 mod = '%';
 recebe = (':')('=');
 recebe_const = '=';
 greater = '>';
 lesser = '<';
 not = '!';
 and = 'and';
 or = 'or';
 xor = 'xor';
 twoequal = ('=')('=');
 goe = ('>')('=');
 loe = ('<')('=');
 diff = ('!')('=');
 l_par = '(';
 r_par = ')';
 l_com = '{';
 r_com = '}';
 l_col = '[';
 r_col = ']';
 ppv = ';';
 vir = ',';
 id = (letra_min|letra_mai)(letra_min|letra_mai|'_')*;
 char = (aspas)(ascii)(aspas);
 number = (digito+)|(('b')(digito+));
 string = aspas_duplas(ascii1|ascii2)*aspas_duplas;
 float = (digito+)'.'(digito+);
 blank = (espaco | rc | nl | tab)+;
 comment = ('{')(ascii)*('}'); 

Ignored Tokens
 blank,
 comment;

Productions

programa {-> programa} = {programa} code id bloco {-> New programa.programa(bloco)};

bloco {-> bloco} =
    {bloco} start declaracao* comando* finish {-> New bloco.bloco([declaracao], [comando])};

declaracao {-> declaracao} =
     {tipo} tipo multi_id* id ppv {-> New declaracao.tipo(tipo, [multi_id])}
    |{unalt} unalterable tipo id inicialize? ppv {-> New declaracao.unalt(tipo,inicialize)};

//auxiliares
multi_var {-> multi_var} = {multi_var} var vir {-> New multi_var.multi_var(var)}; 
multi_exp {-> multi_exp} = {multi_exp} exp vir {-> New multi_exp.multi_exp(exp)};
multi_id {-> multi_id} = {multi_id} id vir {-> New multi_id.multi_id(id)};
multi_pos {-> multi_pos} = {multi_pos} l_col exp r_col {-> New multi_pos.multi_pos(exp)};
inicialize {-> inicialize?} = {tvalor} recebe_const valor {-> New inicialize.tvalor(valor)};

tipo_base {-> tipo_base} =
     {integer} integer {-> New tipo_base.integer(integer)}
    |{real} real {-> New tipo_base.real(real)}
    |{symbol} symbol {-> New tipo_base.symbol(symbol)};

tipo {-> tipo} =
      {vector} tipo_base vector multi_pos+ {-> New tipo.vector(tipo_base, [multi_pos])}
     |{tipo_base} tipo_base {-> New tipo.tipo_base(tipo_base)};

add_pos {-> add_pos} =
    {add_pos} l_col number r_col {-> New add_pos.add_pos(number)};

var {-> var} = 
      {var_idpos} id add_pos+ {-> New var.var_idpos([add_pos])}
     |{id} id {-> New var.id(id)};

unalt {-> unalt} =
      {unalt_idpos} id add_pos+ {-> New unalt.unalt_idpos([add_pos])}
     |{id} id {-> New unalt.id(id)};

valor {-> valor} =
    {caractere} char {-> New valor.caractere(char)}
    |{numero} number {-> New valor.numero(number)}
    |{real} float {-> New valor.real(float)}
    |{palavra} string {-> New valor.palavra(string)};

cmd {-> cmd} = 
     {cpy} var recebe exp ppv {-> New cmd.cpy(var,exp)}
    |{const} unalt recebe_const ppv {-> New cmd.const(unalt)}
    |{capture} capture l_par multi_var* var r_par ppv {-> New cmd.capture([multi_var], var)}
    |{show} show l_par multi_exp* exp r_par ppv  {-> New cmd.show([multi_exp], exp)}
    |{as_long_as} [as1]:as long [as2]:as l_par exp r_par do cmd {-> New cmd.as_long_as(exp, cmd)}
    |{considering} considering var from [e1]:exp to [e2]:exp by [e3]:exp do cmd {-> New cmd.considering(var,e1,e2,e3,cmd)}
    |{bloco} bloco {-> New cmd.bloco(bloco)};
 
otherwise {-> otherwise} = {else} else cmd {-> New otherwise.else(cmd)};

comando {-> comando} = 
     {cmd} cmd {-> New comando.cmd(cmd)}
    |{if} in case that l_par exp r_par do cmd otherwise? {-> New comando.if(exp,cmd,otherwise)};

exp {-> exp} =
     {fator} fator {-> New exp.fator(fator)}
    |{soma} exp plus fator {-> New exp.soma(exp,fator)}
    |{subtracao} exp minus fator {-> New exp.subtracao(exp,fator)}
    |{exp_logica} exp_logica {-> New exp.exp_logica(exp_logica)}
    |{exp_atrib} exp_atrib {-> New exp.exp_atrib(exp_atrib)}
    |{exp_comp} exp_comp {-> New exp.exp_comp(exp_comp)};


fator {-> fator} =
     {termo} termo {-> New fator.termo(termo)}
    |{multiplicacao} fator mult termo {-> New fator.multiplicacao(fator, termo)}
    |{divisao} fator div termo {-> New fator.divisao(fator,termo)}
    |{modulo} fator mod termo {-> New fator.modulo(fator,termo)};

termo {-> termo} =
     {tvalor} valor {-> New termo.tvalor(valor)}
    |{var} var {-> New termo.var(var)}
    |{par} l_par exp r_par {-> New termo.par(exp)};

exp_logica {-> exp_logica} =
     {negacao} exp not fator {-> New exp_logica.negacao(exp, fator)}
    |{ou} exp or fator {-> New exp_logica.ou(exp, fator)}
    |{xou} exp xor fator {-> New exp_logica.xou(exp,fator)}
    |{e} exp and fator {-> New exp_logica.e(exp,fator)};

exp_atrib {-> exp_atrib} =
      {rec} exp recebe fator {-> New exp_atrib.rec(exp,fator)}
     |{rec_const} exp recebe_const fator {-> New exp_atrib.rec_const(exp,fator)};

exp_comp {-> exp_comp} =
     {maior} exp greater fator {-> New exp_comp.maior(exp,fator)}
    |{menor} exp lesser fator {-> New exp_comp.menor(exp,fator)}
    |{igual} exp twoequal fator {-> New exp_comp.igual(exp,fator)};

Abstract Syntax Tree

programa = {programa} bloco;

bloco = {bloco} declaracao* comando*;

declaracao = 
     {tipo} tipo multi_id*
    |{unalt} tipo inicialize?;

multi_var = {multi_var} var;
multi_exp = {multi_exp} exp;
multi_id = {multi_id} id;
multi_pos = {multi_pos} exp;
inicialize = {tvalor} valor; 
add_pos = {add_pos} number;

tipo_base = 
     {integer} integer
    |{real} real
    |{symbol} symbol;

tipo = 
     {vector} tipo_base multi_pos+
    |{tipo_base} tipo_base;

 
var = 
     {var_idpos} add_pos+
    |{id} id;

unalt = 
     {unalt_idpos} add_pos+
    |{id} id;

valor =
     {caractere} char
    |{numero} number
    |{real} float
    |{palavra} string; 
 
cmd =
     {cpy} var exp
    |{const} unalt
    |{capture} multi_var* var
    |{show} multi_exp* exp
    |{as_long_as} exp cmd
    |{considering} var [e1]:exp [e2]:exp [e3]:exp cmd
    |{bloco} bloco;

otherwise = {else} cmd;

comando = 
     {cmd} cmd
    |{if} exp cmd otherwise?;

exp = 
     {fator} fator
    |{soma} exp fator
    |{subtracao} exp fator
    |{exp_logica} exp_logica
    |{exp_atrib} exp_atrib
    |{exp_comp} exp_comp;

fator =
     {termo} termo
    |{multiplicacao} fator termo
    |{divisao} fator termo
    |{modulo} fator termo;

termo =
     {tvalor} valor
    |{var} var
    |{par} exp;

exp_logica =
     {negacao} exp fator
    |{ou} exp fator
    |{xou} exp fator
    |{e} exp fator;

exp_atrib =
     {rec} exp fator
    |{rec_const} exp fator;

exp_comp = 
     {maior} exp fator
    |{menor} exp fator
    |{igual} exp fator; 
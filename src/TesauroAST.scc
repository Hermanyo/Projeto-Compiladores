Package calculadora;

Helpers
 digito = ['0' .. '9'];
 letra_min = ['a' .. 'z'];
 letra_mai = ['A' .. 'Z'];
 ascii = [0x0000..0xFFFF];
 ascii1 = [0x0000..0x0021];
 ascii2 = [0x0023..0xFFFF];
 binary = [0 .. 1];
 espaco = ' ';
 tab = '	';
 rc = 13;
 nl = 10;
 aspas = ''';
 aspas_duplas = '"';

Tokens
 real = 'real';
 integer = 'integer';
 symbol = 'symbol';
 vector = 'vector';
 code = 'code';
 start = 'start';
 finish = 'finish';
 unalterable = 'unalterable';
 in = 'in';
 case = 'case';
 that = 'that';
 do = 'do';
 else = 'else';
 as = 'as';
 long = 'long';
 considering = 'considering';
 from = 'from';
 to = 'to';
 by = 'by';
 capture = 'capture';
 show = 'show';
 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 mod = '%';
 recebe = (':')('=');
 recebe_const = '=';
 greater = '>';
 lesser = '<';
 not = '!';
 and = 'and';
 or = 'or';
 xor = 'xor';
 twoequal = ('=')('=');
 goe = ('>')('=');
 loe = ('<')('=');
 diff = ('!')('=');
 l_par = '(';
 r_par = ')';
 l_com = '{';
 r_com = '}';
 l_col = '[';
 r_col = ']';
 ppv = ';';
 vir = ',';
 id = (letra_min|letra_mai)(letra_min|letra_mai|'_')*;
 char = (aspas)(ascii)(aspas);
 number = (digito+)|(('b')(digito+));
 string = aspas_duplas(ascii1|ascii2)*aspas_duplas;
 float = (digito+)'.'(digito+);
 blank = (espaco | rc | nl | tab)+;
 comment = ('{')(ascii)*('}'); 

Ignored Tokens
 blank,
 comment;

Productions

//auxiliares
multi_exp {-> exp} = exp vir {-> exp.exp};
multi_pos {-> exp} = l_col exp r_col {-> exp.exp};
inicialize {-> exp} = recebe_const valor {-> valor.exp};

tipo_base =
     {integer} integer
    |{real} real
    |{symbol} symbol;

tipo =
	 {vector} tipo_base vector multi_pos+
     |{tipo_base} tipo_base;

var {-> exp} = 
     {id} id {-> New exp.a_id(id)};

unalt {-> exp} =
    {var} var {-> var.exp};

valor {-> exp} =
    {caractere} char {-> New exp.a_caractere(char)}
    |{numero} number {-> New exp.a_numero(number)}
    |{float} float {-> New exp.a_float(float)}
    |{palavra} string {-> New exp.a_palavra(string)};

exp {-> exp} =
    {fator} fator {-> fator.exp}
    |{soma} [esq]:exp plus [dir]:fator {-> New exp.a_soma(esq.exp, dir.exp)}
    |{subtracao} [esq]:exp minus [dir]:fator {-> New exp.a_subtracao(esq.exp, dir.exp)} 
    |{exp_logica} exp_logica {-> exp_logica.exp}
    |{exp_atrib} exp_atrib {-> exp_atrib.exp}
    |{exp_comp} exp_comp {-> exp_comp.exp};

cmd {-> exp} = {cpy} [esq]:var recebe [dir]:exp ppv {-> New exp.a_cpy(esq.exp, dir.exp)}
    |{as_long_as} [as1]:as long [as2]:as l_par [esq]:exp r_par do [dir]:cmd {-> New exp.a_as_long_as(esq.exp, dir.exp)};

otherwise {-> exp} = {else} else cmd {-> cmd.exp};

comando {-> exp} = 
     {cmd} cmd {-> cmd.exp}
    |{if} in case that l_par [esq]:exp r_par do [dir]:cmd otherwise? {-> New exp.a_if(esq.exp, dir.exp)};

fator {-> exp} =
    {termo} termo {-> termo.exp}
    |{multiplicacao} [esq]:fator mult [dir]:termo {-> New exp.a_multiplicacao(esq.exp, dir.exp)}
    |{divisao} [esq]:fator div [dir]:termo {-> New exp.a_divisao(esq.exp, dir.exp)}
    |{modulo} [esq]:fator mod [dir]:termo {-> New exp.a_modulo(esq.exp, dir.exp)};

termo {-> exp} =
    {valor} valor {-> valor.exp}
    |{var} var {-> var.exp}
    |{exp} l_par exp r_par {-> exp.exp};

exp_logica {-> exp} =
    {negacao} [esq]:exp not [dir]:fator {->New exp.a_negacao(esq.exp, dir.exp)}
    |{ou} [esq]:exp or [dir]:fator {->New exp.a_ou(esq.exp, dir.exp)}
    |{xou} [esq]:exp xor [dir]:fator {->New exp.a_xou(esq.exp, dir.exp)}
    |{e} [esq]:exp and [dir]:fator {->New exp.a_e(esq.exp, dir.exp)}; 

exp_atrib {-> exp} =
     {rec} [esq]:exp recebe [dir]:fator {->New exp.a_rec(esq.exp, dir.exp)}
     |{rec_const} [esq]:exp recebe_const [dir]:fator {->New exp.a_rec_const(esq.exp, dir.exp)};

exp_comp {-> exp} =
    {maior} [esq]:exp greater [dir]:fator {->New exp.a_maior(esq.exp, dir.exp)}
    |{menor} [esq]:exp lesser [dir]:fator {->New exp.a_menor(esq.exp, dir.exp)}
    |{igual} [esq]:exp twoequal [dir]:fator {->New exp.a_igual(esq.exp, dir.exp)}
    |{maiorigual} [esq]:exp goe [dir]:fator {->New exp.a_maiorigual(esq.exp, dir.exp)}
    |{menorigual} [esq]:exp loe [dir]:fator {->New exp.a_menorigual(esq.exp, dir.exp)}
    |{diferente} [esq]:exp diff [dir]:fator {->New exp.a_diferente(esq.exp, dir.exp)};

Abstract Syntax Tree

exp = {a_soma} [esq]:exp [dir]:exp
     | {a_subtracao} [esq]:exp [dir]:exp
     | {a_multiplicacao} [esq]:exp [dir]:exp
     | {a_divisao} [esq]:exp [dir]:exp
     | {a_modulo} [esq]:exp [dir]:exp
     | {a_negacao} [esq]:exp [dir]:exp
     | {a_ou} [esq]:exp [dir]:exp
     | {a_xou} [esq]:exp [dir]:exp
     | {a_e} [esq]:exp [dir]:exp
     | {a_rec} [esq]:exp [dir]:exp
     | {a_rec_const} [esq]:exp [dir]:exp
     | {a_maior} [esq]:exp [dir]:exp
     | {a_menor} [esq]:exp [dir]:exp
     | {a_igual} [esq]:exp [dir]:exp
     | {a_maiorigual} [esq]:exp [dir]:exp
     | {a_menorigual} [esq]:exp [dir]:exp
     | {a_diferente} [esq]:exp [dir]:exp
     | {a_id} id
     | {a_caractere} char
     | {a_numero} number
     | {a_float} float
     | {a_palavra} string
     | {a_integer} integer
     | {a_real} real
     | {a_symbol} symbol
     | {a_cpy} [esq]:exp [dir]:exp
     | {a_as_long_as} [esq]:exp [dir]:exp
     | {a_if} [esq]:exp [dir]:exp;
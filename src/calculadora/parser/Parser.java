/* This file was generated by SableCC (http://www.sablecc.org/). */

package calculadora.parser;

import calculadora.lexer.*;
import calculadora.node.*;
import calculadora.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramaPrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAblocobloco1Bloco */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAblocobloco2Bloco */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAblocobloco3Bloco */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAblocobloco4Bloco */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAtipodeclaracao1Declaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAtipodeclaracao2Declaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AAunaltdeclaracao1Declaracao */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce AAunaltdeclaracao2Declaracao */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list);
            }
            break;
            case 9: /* reduce AMultiVarMultiVar */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AMultiExpMultiExp */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AMultiIdMultiId */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AMultiPosMultiPos */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce ATvalorInicialize */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce AIntegerTipoBase */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list);
            }
            break;
            case 15: /* reduce ARealTipoBase */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ASymbolTipoBase */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AVectorTipo */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce AAddPosAddPos */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce AVarIdposVar */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AIdVar */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AUnaltIdposUnalt */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list);
            }
            break;
            case 23: /* reduce AIdUnalt */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce ACaractereValor */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce ANumeroValor */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list);
            }
            break;
            case 26: /* reduce ARealValor */
            {
                ArrayList<Object> list = new26();
                push(goTo(13), list);
            }
            break;
            case 27: /* reduce APalavraValor */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list);
            }
            break;
            case 28: /* reduce ACpyCmd */
            {
                ArrayList<Object> list = new28();
                push(goTo(14), list);
            }
            break;
            case 29: /* reduce AConstCmd */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list);
            }
            break;
            case 30: /* reduce AAcapturecmd1Cmd */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list);
            }
            break;
            case 31: /* reduce AAcapturecmd2Cmd */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce AAshowcmd1Cmd */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce AAshowcmd2Cmd */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list);
            }
            break;
            case 34: /* reduce AAsLongAsCmd */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list);
            }
            break;
            case 35: /* reduce AConsideringCmd */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list);
            }
            break;
            case 36: /* reduce ABlocoCmd */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce AElseOtherwise */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list);
            }
            break;
            case 38: /* reduce ACmdComando */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list);
            }
            break;
            case 39: /* reduce AAifcomando1Comando */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list);
            }
            break;
            case 40: /* reduce AAifcomando2Comando */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list);
            }
            break;
            case 41: /* reduce AFatorExp */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce ASomaExp */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce ASubtracaoExp */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce AExpLogicaExp */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list);
            }
            break;
            case 45: /* reduce AExpAtribExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list);
            }
            break;
            case 46: /* reduce AExpCompExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce ATermoFator */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list);
            }
            break;
            case 48: /* reduce AMultiplicacaoFator */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list);
            }
            break;
            case 49: /* reduce ADivisaoFator */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list);
            }
            break;
            case 50: /* reduce AModuloFator */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce ATvalorTermo */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list);
            }
            break;
            case 52: /* reduce AVarTermo */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce AParTermo */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list);
            }
            break;
            case 54: /* reduce ANegacaoExpLogica */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list);
            }
            break;
            case 55: /* reduce AOuExpLogica */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list);
            }
            break;
            case 56: /* reduce AXouExpLogica */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list);
            }
            break;
            case 57: /* reduce AEExpLogica */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list);
            }
            break;
            case 58: /* reduce ARecExpAtrib */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list);
            }
            break;
            case 59: /* reduce ARecConstExpAtrib */
            {
                ArrayList<Object> list = new59();
                push(goTo(21), list);
            }
            break;
            case 60: /* reduce AMaiorExpComp */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list);
            }
            break;
            case 61: /* reduce AMenorExpComp */
            {
                ArrayList<Object> list = new61();
                push(goTo(22), list);
            }
            break;
            case 62: /* reduce AIgualExpComp */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list);
            }
            break;
            case 63: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new63();
                push(goTo(23), list);
            }
            break;
            case 64: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new64();
                push(goTo(23), list);
            }
            break;
            case 65: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new65();
                push(goTo(24), list);
            }
            break;
            case 66: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new66();
                push(goTo(24), list);
            }
            break;
            case 67: /* reduce ATerminal$MultiId */
            {
                ArrayList<Object> list = new67();
                push(goTo(25), list);
            }
            break;
            case 68: /* reduce ANonTerminal$MultiId */
            {
                ArrayList<Object> list = new68();
                push(goTo(25), list);
            }
            break;
            case 69: /* reduce ATerminal$MultiPos */
            {
                ArrayList<Object> list = new69();
                push(goTo(26), list);
            }
            break;
            case 70: /* reduce ANonTerminal$MultiPos */
            {
                ArrayList<Object> list = new70();
                push(goTo(26), list);
            }
            break;
            case 71: /* reduce ATerminal$AddPos */
            {
                ArrayList<Object> list = new71();
                push(goTo(27), list);
            }
            break;
            case 72: /* reduce ANonTerminal$AddPos */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list);
            }
            break;
            case 73: /* reduce ATerminal$MultiVar */
            {
                ArrayList<Object> list = new73();
                push(goTo(28), list);
            }
            break;
            case 74: /* reduce ANonTerminal$MultiVar */
            {
                ArrayList<Object> list = new74();
                push(goTo(28), list);
            }
            break;
            case 75: /* reduce ATerminal$MultiExp */
            {
                ArrayList<Object> list = new75();
                push(goTo(29), list);
            }
            break;
            case 76: /* reduce ANonTerminal$MultiExp */
            {
                ArrayList<Object> list = new76();
                push(goTo(29), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramaPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList3.get(0);

        pprogramaNode1 = new AProgramaPrograma(pblocoNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAblocobloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pblocoNode1 = new ABlocoBloco(listNode2, listNode3);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAblocobloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pblocoNode1 = new ABlocoBloco(listNode3, listNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAblocobloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pblocoNode1 = new ABlocoBloco(listNode2, listNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAblocobloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pblocoNode1 = new ABlocoBloco(listNode3, listNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAtipodeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TId tidNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        }
        tidNode4 = (TId)nodeArrayList2.get(0);

        pdeclaracaoNode1 = new ATipoDeclaracao(ptipoNode2, listNode3, tidNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAtipodeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TId tidNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tidNode5 = (TId)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new ATipoDeclaracao(ptipoNode2, listNode4, tidNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAunaltdeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AUnaltDeclaracao(ptipoNode2, tidNode3, null);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAunaltdeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        PInicialize pinicializeNode4;
        ptipoNode2 = (PTipo)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        pinicializeNode4 = (PInicialize)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AUnaltDeclaracao(ptipoNode2, tidNode3, pinicializeNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMultiVarMultiVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiVar pmultivarNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pmultivarNode1 = new AMultiVarMultiVar(pvarNode2);
        }
	nodeList.add(pmultivarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMultiExpMultiExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiExp pmultiexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pmultiexpNode1 = new AMultiExpMultiExp(pexpNode2);
        }
	nodeList.add(pmultiexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AMultiIdMultiId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiId pmultiidNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pmultiidNode1 = new AMultiIdMultiId(tidNode2);
        }
	nodeList.add(pmultiidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AMultiPosMultiPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiPos pmultiposNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pmultiposNode1 = new AMultiPosMultiPos(pexpNode2);
        }
	nodeList.add(pmultiposNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATvalorInicialize */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInicialize pinicializeNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList2.get(0);

        pinicializeNode1 = new ATvalorInicialize(pvalorNode2);
        }
	nodeList.add(pinicializeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AIntegerTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptipobaseNode1 = new AIntegerTipoBase(tintegerNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ARealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipobaseNode1 = new ARealTipoBase(trealNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASymbolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        ptipobaseNode1 = new ASymbolTipoBase(tsymbolNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVectorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptipoNode1 = new AVectorTipo(ptipobaseNode2, listNode4);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAddPosAddPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddPos paddposNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList2.get(0);

        paddposNode1 = new AAddPosAddPos(tnumberNode2);
        }
	nodeList.add(paddposNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVarIdposVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pvarNode1 = new AVarIdposVar(listNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AUnaltIdposUnalt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnalt punaltNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        punaltNode1 = new AUnaltIdposUnalt(listNode3);
        }
	nodeList.add(punaltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIdUnalt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnalt punaltNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        punaltNode1 = new AIdUnalt(tidNode2);
        }
	nodeList.add(punaltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACaractereValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pvalorNode1 = new ACaractereValor(tcharNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ANumeroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalorNode1 = new ANumeroValor(tnumberNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TFloat tfloatNode2;
        tfloatNode2 = (TFloat)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(tfloatNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce APalavraValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new APalavraValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACpyCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcmdNode1 = new ACpyCmd(pvarNode2, pexpNode3);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AConstCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PUnalt punaltNode2;
        punaltNode2 = (PUnalt)nodeArrayList1.get(0);

        pcmdNode1 = new AConstCmd(punaltNode2);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAcapturecmd1Cmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PVar pvarNode3;
        {
            // Block
        }
        pvarNode3 = (PVar)nodeArrayList3.get(0);

        pcmdNode1 = new ACaptureCmd(listNode2, pvarNode3);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAcapturecmd2Cmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PVar pvarNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pvarNode4 = (PVar)nodeArrayList4.get(0);

        pcmdNode1 = new ACaptureCmd(listNode3, pvarNode4);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAshowcmd1Cmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcmdNode1 = new AShowCmd(listNode2, pexpNode3);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAshowcmd2Cmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pcmdNode1 = new AShowCmd(listNode3, pexpNode4);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAsLongAsCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PExp pexpNode2;
        PCmd pcmdNode3;
        pexpNode2 = (PExp)nodeArrayList5.get(0);
        pcmdNode3 = (PCmd)nodeArrayList8.get(0);

        pcmdNode1 = new AAsLongAsCmd(pexpNode2, pcmdNode3);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AConsideringCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        PExp pexpNode5;
        PCmd pcmdNode6;
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);
        pexpNode4 = (PExp)nodeArrayList6.get(0);
        pexpNode5 = (PExp)nodeArrayList8.get(0);
        pcmdNode6 = (PCmd)nodeArrayList10.get(0);

        pcmdNode1 = new AConsideringCmd(pvarNode2, pexpNode3, pexpNode4, pexpNode5, pcmdNode6);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ABlocoCmd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCmd pcmdNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pcmdNode1 = new ABlocoCmd(pblocoNode2);
        }
	nodeList.add(pcmdNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AElseOtherwise */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtherwise potherwiseNode1;
        {
            // Block
        PCmd pcmdNode2;
        pcmdNode2 = (PCmd)nodeArrayList2.get(0);

        potherwiseNode1 = new AElseOtherwise(pcmdNode2);
        }
	nodeList.add(potherwiseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ACmdComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PCmd pcmdNode2;
        pcmdNode2 = (PCmd)nodeArrayList1.get(0);

        pcomandoNode1 = new ACmdComando(pcmdNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAifcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PCmd pcmdNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pexpNode2 = (PExp)nodeArrayList5.get(0);
        pcmdNode3 = (PCmd)nodeArrayList8.get(0);

        pcomandoNode1 = new AIfComando(pexpNode2, pcmdNode3, null);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAifcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExp pexpNode2;
        PCmd pcmdNode3;
        POtherwise potherwiseNode4;
        pexpNode2 = (PExp)nodeArrayList5.get(0);
        pcmdNode3 = (PCmd)nodeArrayList8.get(0);
        potherwiseNode4 = (POtherwise)nodeArrayList9.get(0);

        pcomandoNode1 = new AIfComando(pexpNode2, pcmdNode3, potherwiseNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AFatorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        pexpNode1 = new AFatorExp(pfatorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASubtracaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexpNode1 = new ASubtracaoExp(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpLogicaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);

        pexpNode1 = new AExpLogicaExp(pexplogicaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AExpAtribExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpAtrib pexpatribNode2;
        pexpatribNode2 = (PExpAtrib)nodeArrayList1.get(0);

        pexpNode1 = new AExpAtribExp(pexpatribNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpCompExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpComp pexpcompNode2;
        pexpcompNode2 = (PExpComp)nodeArrayList1.get(0);

        pexpNode1 = new AExpCompExp(pexpcompNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ATermoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pfatorNode1 = new ATermoFator(ptermoNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AMultiplicacaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        PTermo ptermoNode3;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new AMultiplicacaoFator(pfatorNode2, ptermoNode3);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ADivisaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        PTermo ptermoNode3;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new ADivisaoFator(pfatorNode2, ptermoNode3);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AModuloFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        PTermo ptermoNode3;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorNode1 = new AModuloFator(pfatorNode2, ptermoNode3);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATvalorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        ptermoNode1 = new ATvalorTermo(pvalorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AVarTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        ptermoNode1 = new AVarTermo(pvarNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AParTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        ptermoNode1 = new AParTermo(pexpNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANegacaoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexplogicaNode1 = new ANegacaoExpLogica(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AXouExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXouExpLogica(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AEExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexplogicaNode1 = new AEExpLogica(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ARecExpAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAtrib pexpatribNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexpatribNode1 = new ARecExpAtrib(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexpatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ARecConstExpAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpAtrib pexpatribNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexpatribNode1 = new ARecConstExpAtrib(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexpatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMaiorExpComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpComp pexpcompNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexpcompNode1 = new AMaiorExpComp(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexpcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AMenorExpComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpComp pexpcompNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexpcompNode1 = new AMenorExpComp(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexpcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AIgualExpComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpComp pexpcompNode1;
        {
            // Block
        PExp pexpNode2;
        PFator pfatorNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pfatorNode3 = (PFator)nodeArrayList3.get(0);

        pexpcompNode1 = new AIgualExpComp(pexpNode2, pfatorNode3);
        }
	nodeList.add(pexpcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATerminal$MultiId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiId pmultiidNode1;
        pmultiidNode1 = (PMultiId)nodeArrayList1.get(0);
	if(pmultiidNode1 != null)
	{
	  listNode2.add(pmultiidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANonTerminal$MultiId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiId pmultiidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultiidNode2 = (PMultiId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultiidNode2 != null)
	{
	  listNode3.add(pmultiidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$MultiPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiPos pmultiposNode1;
        pmultiposNode1 = (PMultiPos)nodeArrayList1.get(0);
	if(pmultiposNode1 != null)
	{
	  listNode2.add(pmultiposNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$MultiPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiPos pmultiposNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultiposNode2 = (PMultiPos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultiposNode2 != null)
	{
	  listNode3.add(pmultiposNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$AddPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAddPos paddposNode1;
        paddposNode1 = (PAddPos)nodeArrayList1.get(0);
	if(paddposNode1 != null)
	{
	  listNode2.add(paddposNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$AddPos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAddPos paddposNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paddposNode2 = (PAddPos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paddposNode2 != null)
	{
	  listNode3.add(paddposNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$MultiVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiVar pmultivarNode1;
        pmultivarNode1 = (PMultiVar)nodeArrayList1.get(0);
	if(pmultivarNode1 != null)
	{
	  listNode2.add(pmultivarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$MultiVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiVar pmultivarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultivarNode2 = (PMultiVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultivarNode2 != null)
	{
	  listNode3.add(pmultivarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$MultiExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMultiExp pmultiexpNode1;
        pmultiexpNode1 = (PMultiExp)nodeArrayList1.get(0);
	if(pmultiexpNode1 != null)
	{
	  listNode2.add(pmultiexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$MultiExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMultiExp pmultiexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultiexpNode2 = (PMultiExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultiexpNode2 != null)
	{
	  listNode3.add(pmultiexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {4, SHIFT, 1}, },
			{{-1, ERROR, 1}, {46, SHIFT, 3}, },
			{{-1, ERROR, 2}, {51, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {5, SHIFT, 4}, },
			{{-1, ERROR, 4}, {0, SHIFT, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, {5, SHIFT, 4}, {6, SHIFT, 9}, {7, SHIFT, 10}, {8, SHIFT, 11}, {13, SHIFT, 12}, {15, SHIFT, 13}, {19, SHIFT, 14}, {20, SHIFT, 15}, {46, SHIFT, 16}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 10}, {0, SHIFT, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, },
			{{-1, ERROR, 11}, {9, SHIFT, 28}, },
			{{-1, ERROR, 12}, {14, SHIFT, 29}, },
			{{-1, ERROR, 13}, {46, SHIFT, 30}, },
			{{-1, ERROR, 14}, {38, SHIFT, 32}, },
			{{-1, ERROR, 15}, {38, SHIFT, 33}, },
			{{-1, REDUCE, 21}, {27, REDUCE, 23}, {42, SHIFT, 34}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 17}, {3, SHIFT, 37}, },
			{{-1, ERROR, 20}, {46, SHIFT, 38}, },
			{{-1, ERROR, 21}, {26, SHIFT, 41}, },
			{{-1, ERROR, 22}, {27, SHIFT, 42}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 25}, {0, SHIFT, 6}, {1, SHIFT, 7}, {2, SHIFT, 8}, {5, SHIFT, 4}, {6, SHIFT, 43}, {7, SHIFT, 10}, {8, SHIFT, 11}, {13, SHIFT, 12}, {15, SHIFT, 13}, {19, SHIFT, 14}, {20, SHIFT, 15}, {46, SHIFT, 16}, },
			{{-1, ERROR, 26}, {5, SHIFT, 4}, {6, SHIFT, 46}, {8, SHIFT, 11}, {13, SHIFT, 12}, {15, SHIFT, 13}, {19, SHIFT, 14}, {20, SHIFT, 15}, {46, SHIFT, 16}, },
			{{-1, ERROR, 27}, {46, SHIFT, 48}, },
			{{-1, ERROR, 28}, {10, SHIFT, 49}, },
			{{-1, ERROR, 29}, {13, SHIFT, 50}, },
			{{-1, REDUCE, 21}, {42, SHIFT, 34}, },
			{{-1, ERROR, 31}, {16, SHIFT, 52}, },
			{{-1, ERROR, 32}, {46, SHIFT, 30}, },
			{{-1, ERROR, 33}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 34}, {48, SHIFT, 71}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 20}, {27, REDUCE, 22}, {42, SHIFT, 34}, },
			{{-1, ERROR, 37}, {42, SHIFT, 73}, },
			{{-1, ERROR, 38}, {44, SHIFT, 76}, {45, SHIFT, 77}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 40}, {46, SHIFT, 78}, },
			{{-1, ERROR, 41}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 42}, {44, SHIFT, 81}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 45}, {5, SHIFT, 4}, {6, SHIFT, 82}, {8, SHIFT, 11}, {13, SHIFT, 12}, {15, SHIFT, 13}, {19, SHIFT, 14}, {20, SHIFT, 15}, {46, SHIFT, 16}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 48}, {27, SHIFT, 83}, {44, SHIFT, 84}, },
			{{-1, ERROR, 49}, {38, SHIFT, 86}, },
			{{-1, ERROR, 50}, {38, SHIFT, 87}, },
			{{-1, REDUCE, 20}, {42, SHIFT, 34}, },
			{{-1, ERROR, 52}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 54}, {39, SHIFT, 89}, {45, SHIFT, 90}, },
			{{-1, ERROR, 55}, {46, SHIFT, 30}, },
			{{-1, ERROR, 56}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 64}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {39, SHIFT, 105}, {45, SHIFT, 106}, },
			{{-1, REDUCE, 41}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 70}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 71}, {43, SHIFT, 112}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 73}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 18}, {42, SHIFT, 73}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 78}, {44, SHIFT, 115}, {45, SHIFT, 77}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 80}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {44, SHIFT, 116}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 83}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 85}, {44, SHIFT, 118}, },
			{{-1, ERROR, 86}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 87}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 88}, {17, SHIFT, 121}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, },
			{{-1, ERROR, 89}, {44, SHIFT, 122}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 92}, {39, SHIFT, 123}, {45, SHIFT, 90}, },
			{{-1, ERROR, 93}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {39, SHIFT, 124}, },
			{{-1, ERROR, 94}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 95}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 96}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 97}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 98}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 99}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 100}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 101}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 102}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 103}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 104}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 105}, {44, SHIFT, 136}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 107}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 108}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, ERROR, 109}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 111}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {39, SHIFT, 140}, {45, SHIFT, 106}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 113}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {43, SHIFT, 141}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 119}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {39, SHIFT, 142}, },
			{{-1, ERROR, 120}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, {39, SHIFT, 143}, },
			{{-1, ERROR, 121}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 123}, {44, SHIFT, 145}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 42}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 43}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 58}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 59}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 60}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 61}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 54}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 57}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 55}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 56}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 62}, {23, SHIFT, 107}, {24, SHIFT, 108}, {25, SHIFT, 109}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 140}, {44, SHIFT, 146}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 142}, {11, SHIFT, 147}, },
			{{-1, ERROR, 143}, {11, SHIFT, 148}, },
			{{-1, ERROR, 144}, {18, SHIFT, 149}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 147}, {5, SHIFT, 4}, {13, SHIFT, 12}, {15, SHIFT, 13}, {19, SHIFT, 14}, {20, SHIFT, 15}, {46, SHIFT, 16}, },
			{{-1, ERROR, 148}, {5, SHIFT, 4}, {13, SHIFT, 12}, {15, SHIFT, 13}, {19, SHIFT, 14}, {20, SHIFT, 15}, {46, SHIFT, 16}, },
			{{-1, ERROR, 149}, {38, SHIFT, 56}, {46, SHIFT, 30}, {47, SHIFT, 57}, {48, SHIFT, 58}, {49, SHIFT, 59}, {50, SHIFT, 60}, },
			{{-1, REDUCE, 39}, {12, SHIFT, 153}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 152}, {11, SHIFT, 155}, {21, SHIFT, 94}, {22, SHIFT, 95}, {26, SHIFT, 96}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, {31, SHIFT, 101}, {32, SHIFT, 102}, {33, SHIFT, 103}, {34, SHIFT, 104}, },
			{{-1, ERROR, 153}, {5, SHIFT, 4}, {13, SHIFT, 12}, {15, SHIFT, 13}, {19, SHIFT, 14}, {20, SHIFT, 15}, {46, SHIFT, 16}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 155}, {5, SHIFT, 4}, {13, SHIFT, 12}, {15, SHIFT, 13}, {19, SHIFT, 14}, {20, SHIFT, 15}, {46, SHIFT, 16}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 35}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 17}, {3, 5}, },
			{{-1, 18}, {25, 44}, },
			{{-1, 53}, {55, 91}, },
			{{-1, 61}, {70, 110}, },
			{{-1, 39}, {40, 79}, },
			{{-1, 74}, {75, 114}, },
			{{-1, 85}, },
			{{-1, 19}, },
			{{-1, 20}, {10, 27}, },
			{{-1, 35}, {36, 72}, {51, 72}, },
			{{-1, 62}, {4, 21}, {13, 31}, {25, 21}, {26, 21}, {32, 54}, {45, 21}, {55, 92}, {147, 21}, {148, 21}, {153, 21}, {155, 21}, },
			{{-1, 22}, },
			{{-1, 63}, {83, 117}, },
			{{-1, 23}, {147, 150}, {148, 151}, {153, 156}, {155, 157}, },
			{{-1, 154}, },
			{{-1, 24}, {26, 47}, {45, 47}, },
			{{-1, 64}, {41, 80}, {52, 88}, {56, 93}, {70, 111}, {73, 113}, {86, 119}, {87, 120}, {121, 144}, {149, 152}, },
			{{-1, 65}, {94, 125}, {95, 126}, {96, 127}, {97, 128}, {98, 129}, {99, 130}, {100, 131}, {101, 132}, {102, 133}, {103, 134}, {104, 135}, },
			{{-1, 66}, {107, 137}, {108, 138}, {109, 139}, },
			{{-1, 67}, },
			{{-1, 68}, },
			{{-1, 69}, },
			{{-1, 25}, },
			{{-1, 26}, {25, 45}, },
			{{-1, 40}, },
			{{-1, 75}, },
			{{-1, 36}, {30, 51}, },
			{{-1, 55}, },
			{{-1, 70}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'code'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'start'",
			"expecting: 'real', 'integer', 'symbol', 'start', 'finish', 'unalterable', 'in', 'as', 'considering', 'capture', 'show', id",
			"expecting: 'vector', id",
			"expecting: 'start', 'finish', 'in', 'else', 'as', 'considering', 'capture', 'show', id, EOF",
			"expecting: 'real', 'integer', 'symbol'",
			"expecting: 'case'",
			"expecting: 'long'",
			"expecting: '('",
			"expecting: recebe, '=', '['",
			"expecting: 'start', 'finish', 'in', 'else', 'as', 'considering', 'capture', 'show', id",
			"expecting: recebe",
			"expecting: '='",
			"expecting: 'start', 'finish', 'in', 'as', 'considering', 'capture', 'show', id",
			"expecting: 'that'",
			"expecting: 'as'",
			"expecting: 'do', 'from', 'to', 'by', '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal, ')', '[', ']', ';', ','",
			"expecting: 'from'",
			"expecting: '(', id, char, number, string, float",
			"expecting: number",
			"expecting: '['",
			"expecting: ';', ','",
			"expecting: ';'",
			"expecting: '=', ';'",
			"expecting: ')', ','",
			"expecting: 'do', 'to', 'by', '+', '-', '*', '/', '%', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal, ')', ']', ';', ','",
			"expecting: '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal, ')', ','",
			"expecting: 'do', 'to', 'by', '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal, ')', ']', ';', ','",
			"expecting: ']'",
			"expecting: '[', id",
			"expecting: '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal, ';'",
			"expecting: char, number, string, float",
			"expecting: 'to', '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal",
			"expecting: '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal, ')'",
			"expecting: '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal, ']'",
			"expecting: 'do'",
			"expecting: 'by', '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal",
			"expecting: 'start', 'as', 'considering', 'capture', 'show', id",
			"expecting: 'do', '+', '-', recebe, '=', '>', '<', '!', 'and', 'or', 'xor', twoequal",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 5, 5, 6, 7, 8, 9, 1, 10, 10, 11, 12, 4, 5, 1, 13, 14, 15, 15, 4, 15, 1, 16, 17, 18, 19, 1, 20, 21, 18, 11, 22, 23, 1, 1, 20, 24, 6, 4, 15, 6, 15, 25, 10, 10, 18, 20, 1, 26, 1, 20, 27, 27, 27, 27, 20, 27, 27, 28, 27, 27, 29, 29, 29, 20, 30, 18, 20, 31, 31, 4, 1, 23, 1, 32, 12, 6, 33, 4, 24, 20, 20, 34, 24, 1, 1, 26, 35, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 24, 20, 20, 20, 20, 20, 28, 18, 36, 31, 4, 12, 24, 4, 35, 35, 20, 12, 24, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12, 27, 27, 27, 24, 31, 37, 37, 38, 12, 12, 39, 39, 20, 12, 12, 40, 39, 15, 39, 15, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

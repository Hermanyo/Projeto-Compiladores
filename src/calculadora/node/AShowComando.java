/* This file was generated by SableCC (http://www.sablecc.org/). */

package calculadora.node;

import java.util.*;
import calculadora.analysis.*;

@SuppressWarnings("nls")
public final class AShowComando extends PComando
{
    private TShow _show_;
    private TLPar _lPar_;
    private final LinkedList<PMultiExp> _multiExp_ = new LinkedList<PMultiExp>();
    private PExp _exp_;
    private TRPar _rPar_;
    private TPpv _ppv_;

    public AShowComando()
    {
        // Constructor
    }

    public AShowComando(
        @SuppressWarnings("hiding") TShow _show_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") List<?> _multiExp_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TPpv _ppv_)
    {
        // Constructor
        setShow(_show_);

        setLPar(_lPar_);

        setMultiExp(_multiExp_);

        setExp(_exp_);

        setRPar(_rPar_);

        setPpv(_ppv_);

    }

    @Override
    public Object clone()
    {
        return new AShowComando(
            cloneNode(this._show_),
            cloneNode(this._lPar_),
            cloneList(this._multiExp_),
            cloneNode(this._exp_),
            cloneNode(this._rPar_),
            cloneNode(this._ppv_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShowComando(this);
    }

    public TShow getShow()
    {
        return this._show_;
    }

    public void setShow(TShow node)
    {
        if(this._show_ != null)
        {
            this._show_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._show_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public LinkedList<PMultiExp> getMultiExp()
    {
        return this._multiExp_;
    }

    public void setMultiExp(List<?> list)
    {
        for(PMultiExp e : this._multiExp_)
        {
            e.parent(null);
        }
        this._multiExp_.clear();

        for(Object obj_e : list)
        {
            PMultiExp e = (PMultiExp) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._multiExp_.add(e);
        }
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TPpv getPpv()
    {
        return this._ppv_;
    }

    public void setPpv(TPpv node)
    {
        if(this._ppv_ != null)
        {
            this._ppv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ppv_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._show_)
            + toString(this._lPar_)
            + toString(this._multiExp_)
            + toString(this._exp_)
            + toString(this._rPar_)
            + toString(this._ppv_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._show_ == child)
        {
            this._show_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._multiExp_.remove(child))
        {
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._ppv_ == child)
        {
            this._ppv_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._show_ == oldChild)
        {
            setShow((TShow) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        for(ListIterator<PMultiExp> i = this._multiExp_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMultiExp) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._ppv_ == oldChild)
        {
            setPpv((TPpv) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package calculadora.node;

import java.util.*;
import calculadora.analysis.*;

@SuppressWarnings("nls")
public final class ACaptureCmd extends PCmd
{
    private final LinkedList<PVar> _multiVar_ = new LinkedList<PVar>();

    public ACaptureCmd()
    {
        // Constructor
    }

    public ACaptureCmd(
        @SuppressWarnings("hiding") List<?> _multiVar_)
    {
        // Constructor
        setMultiVar(_multiVar_);

    }

    @Override
    public Object clone()
    {
        return new ACaptureCmd(
            cloneList(this._multiVar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACaptureCmd(this);
    }

    public LinkedList<PVar> getMultiVar()
    {
        return this._multiVar_;
    }

    public void setMultiVar(List<?> list)
    {
        for(PVar e : this._multiVar_)
        {
            e.parent(null);
        }
        this._multiVar_.clear();

        for(Object obj_e : list)
        {
            PVar e = (PVar) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._multiVar_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multiVar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multiVar_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PVar> i = this._multiVar_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVar) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

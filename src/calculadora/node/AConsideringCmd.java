/* This file was generated by SableCC (http://www.sablecc.org/). */

package calculadora.node;

import calculadora.analysis.*;

@SuppressWarnings("nls")
public final class AConsideringCmd extends PCmd
{
    private PVar _var_;
    private PExp _exp1_;
    private PExp _exp2_;
    private PExp _exp3_;
    private PCmd _cmd_;

    public AConsideringCmd()
    {
        // Constructor
    }

    public AConsideringCmd(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") PExp _exp1_,
        @SuppressWarnings("hiding") PExp _exp2_,
        @SuppressWarnings("hiding") PExp _exp3_,
        @SuppressWarnings("hiding") PCmd _cmd_)
    {
        // Constructor
        setVar(_var_);

        setExp1(_exp1_);

        setExp2(_exp2_);

        setExp3(_exp3_);

        setCmd(_cmd_);

    }

    @Override
    public Object clone()
    {
        return new AConsideringCmd(
            cloneNode(this._var_),
            cloneNode(this._exp1_),
            cloneNode(this._exp2_),
            cloneNode(this._exp3_),
            cloneNode(this._cmd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConsideringCmd(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public PExp getExp1()
    {
        return this._exp1_;
    }

    public void setExp1(PExp node)
    {
        if(this._exp1_ != null)
        {
            this._exp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp1_ = node;
    }

    public PExp getExp2()
    {
        return this._exp2_;
    }

    public void setExp2(PExp node)
    {
        if(this._exp2_ != null)
        {
            this._exp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp2_ = node;
    }

    public PExp getExp3()
    {
        return this._exp3_;
    }

    public void setExp3(PExp node)
    {
        if(this._exp3_ != null)
        {
            this._exp3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp3_ = node;
    }

    public PCmd getCmd()
    {
        return this._cmd_;
    }

    public void setCmd(PCmd node)
    {
        if(this._cmd_ != null)
        {
            this._cmd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cmd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._exp1_)
            + toString(this._exp2_)
            + toString(this._exp3_)
            + toString(this._cmd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._exp1_ == child)
        {
            this._exp1_ = null;
            return;
        }

        if(this._exp2_ == child)
        {
            this._exp2_ = null;
            return;
        }

        if(this._exp3_ == child)
        {
            this._exp3_ = null;
            return;
        }

        if(this._cmd_ == child)
        {
            this._cmd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._exp1_ == oldChild)
        {
            setExp1((PExp) newChild);
            return;
        }

        if(this._exp2_ == oldChild)
        {
            setExp2((PExp) newChild);
            return;
        }

        if(this._exp3_ == oldChild)
        {
            setExp3((PExp) newChild);
            return;
        }

        if(this._cmd_ == oldChild)
        {
            setCmd((PCmd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

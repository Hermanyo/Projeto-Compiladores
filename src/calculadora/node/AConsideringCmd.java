/* This file was generated by SableCC (http://www.sablecc.org/). */

package calculadora.node;

import calculadora.analysis.*;

@SuppressWarnings("nls")
public final class AConsideringCmd extends PCmd
{
    private TConsidering _considering_;
    private PVar _var_;
    private TFrom _from_;
    private PExp _e1_;
    private TTo _to_;
    private PExp _e2_;
    private TBy _by_;
    private PExp _e3_;
    private TDo _do_;
    private PCmd _cmd_;

    public AConsideringCmd()
    {
        // Constructor
    }

    public AConsideringCmd(
        @SuppressWarnings("hiding") TConsidering _considering_,
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TFrom _from_,
        @SuppressWarnings("hiding") PExp _e1_,
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PExp _e2_,
        @SuppressWarnings("hiding") TBy _by_,
        @SuppressWarnings("hiding") PExp _e3_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PCmd _cmd_)
    {
        // Constructor
        setConsidering(_considering_);

        setVar(_var_);

        setFrom(_from_);

        setE1(_e1_);

        setTo(_to_);

        setE2(_e2_);

        setBy(_by_);

        setE3(_e3_);

        setDo(_do_);

        setCmd(_cmd_);

    }

    @Override
    public Object clone()
    {
        return new AConsideringCmd(
            cloneNode(this._considering_),
            cloneNode(this._var_),
            cloneNode(this._from_),
            cloneNode(this._e1_),
            cloneNode(this._to_),
            cloneNode(this._e2_),
            cloneNode(this._by_),
            cloneNode(this._e3_),
            cloneNode(this._do_),
            cloneNode(this._cmd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConsideringCmd(this);
    }

    public TConsidering getConsidering()
    {
        return this._considering_;
    }

    public void setConsidering(TConsidering node)
    {
        if(this._considering_ != null)
        {
            this._considering_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._considering_ = node;
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TFrom getFrom()
    {
        return this._from_;
    }

    public void setFrom(TFrom node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public PExp getE1()
    {
        return this._e1_;
    }

    public void setE1(PExp node)
    {
        if(this._e1_ != null)
        {
            this._e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e1_ = node;
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PExp getE2()
    {
        return this._e2_;
    }

    public void setE2(PExp node)
    {
        if(this._e2_ != null)
        {
            this._e2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e2_ = node;
    }

    public TBy getBy()
    {
        return this._by_;
    }

    public void setBy(TBy node)
    {
        if(this._by_ != null)
        {
            this._by_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._by_ = node;
    }

    public PExp getE3()
    {
        return this._e3_;
    }

    public void setE3(PExp node)
    {
        if(this._e3_ != null)
        {
            this._e3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e3_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PCmd getCmd()
    {
        return this._cmd_;
    }

    public void setCmd(PCmd node)
    {
        if(this._cmd_ != null)
        {
            this._cmd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cmd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._considering_)
            + toString(this._var_)
            + toString(this._from_)
            + toString(this._e1_)
            + toString(this._to_)
            + toString(this._e2_)
            + toString(this._by_)
            + toString(this._e3_)
            + toString(this._do_)
            + toString(this._cmd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._considering_ == child)
        {
            this._considering_ = null;
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._e1_ == child)
        {
            this._e1_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._e2_ == child)
        {
            this._e2_ = null;
            return;
        }

        if(this._by_ == child)
        {
            this._by_ = null;
            return;
        }

        if(this._e3_ == child)
        {
            this._e3_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._cmd_ == child)
        {
            this._cmd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._considering_ == oldChild)
        {
            setConsidering((TConsidering) newChild);
            return;
        }

        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._from_ == oldChild)
        {
            setFrom((TFrom) newChild);
            return;
        }

        if(this._e1_ == oldChild)
        {
            setE1((PExp) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._e2_ == oldChild)
        {
            setE2((PExp) newChild);
            return;
        }

        if(this._by_ == oldChild)
        {
            setBy((TBy) newChild);
            return;
        }

        if(this._e3_ == oldChild)
        {
            setE3((PExp) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._cmd_ == oldChild)
        {
            setCmd((PCmd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

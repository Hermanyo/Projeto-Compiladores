/* This file was generated by SableCC (http://www.sablecc.org/). */

package calculadora.node;

import calculadora.analysis.*;

@SuppressWarnings("nls")
public final class AConstCmd extends PCmd
{
    private PUnalt _unalt_;
    private TRecebeConst _recebeConst_;
    private TPpv _ppv_;

    public AConstCmd()
    {
        // Constructor
    }

    public AConstCmd(
        @SuppressWarnings("hiding") PUnalt _unalt_,
        @SuppressWarnings("hiding") TRecebeConst _recebeConst_,
        @SuppressWarnings("hiding") TPpv _ppv_)
    {
        // Constructor
        setUnalt(_unalt_);

        setRecebeConst(_recebeConst_);

        setPpv(_ppv_);

    }

    @Override
    public Object clone()
    {
        return new AConstCmd(
            cloneNode(this._unalt_),
            cloneNode(this._recebeConst_),
            cloneNode(this._ppv_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstCmd(this);
    }

    public PUnalt getUnalt()
    {
        return this._unalt_;
    }

    public void setUnalt(PUnalt node)
    {
        if(this._unalt_ != null)
        {
            this._unalt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._unalt_ = node;
    }

    public TRecebeConst getRecebeConst()
    {
        return this._recebeConst_;
    }

    public void setRecebeConst(TRecebeConst node)
    {
        if(this._recebeConst_ != null)
        {
            this._recebeConst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._recebeConst_ = node;
    }

    public TPpv getPpv()
    {
        return this._ppv_;
    }

    public void setPpv(TPpv node)
    {
        if(this._ppv_ != null)
        {
            this._ppv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ppv_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._unalt_)
            + toString(this._recebeConst_)
            + toString(this._ppv_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._unalt_ == child)
        {
            this._unalt_ = null;
            return;
        }

        if(this._recebeConst_ == child)
        {
            this._recebeConst_ = null;
            return;
        }

        if(this._ppv_ == child)
        {
            this._ppv_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._unalt_ == oldChild)
        {
            setUnalt((PUnalt) newChild);
            return;
        }

        if(this._recebeConst_ == oldChild)
        {
            setRecebeConst((TRecebeConst) newChild);
            return;
        }

        if(this._ppv_ == oldChild)
        {
            setPpv((TPpv) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

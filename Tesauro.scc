 Helpers
 digito = ['0' .. '9'];
 letra_min = ['a' .. 'z'];
 letra_mai = ['A' .. 'Z'];
 ascii = [0x0000..0xFFFF];
 binary = [0 .. 1];
 espaco = ' ';
 tab = '	';
 rc = 13;
 nl = 10;
 aspas = ''';

Tokens
 real = 'real';
 integer = 'integer';
 symbol = 'symbol';
 vector = 'vector ';
 code = 'code';
 start = 'start';
 finish = 'finish';
 unalterable = 'unalterable';
 in = 'in';
 case = 'case';
 that = 'that';
 do = 'do';
 else = 'else';
 as = 'as';
 long = 'long';
 considering = 'considering';
 from = 'from';
 to = 'to';
 by = 'by';
 capture = 'capture';
 show = 'show';
 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 mod = '%';
 recebe = (':')('=');
 recebe_const = '=';
 greater = '>';
 lesser = '<';
 not = '!';
 and = 'and';
 or = 'or';
 xor = 'xor'; 
 twoequal = ('=')('=');
 goe = ('>')('=');
 loe = ('<')('=');
 diff = ('!')('=');
 l_par = '(';
 r_par = ')';
 l_com = '{';
 r_com = '}';
 l_col = '[';
 r_col = ']';
 ppv = ';';
 vir = ',';
 id = (letra_min|letra_mai)(letra_min|letra_mai|'_')*;
 char = (aspas)(ascii)(aspas);
 number = digito+;//(digito+)|(('b')(digito+));
 string = ('"')(ascii)*('"');
 float = (digito+)'.'(digito+);
 blank = (espaco | rc | nl | tab)+;
 comment = ('{')(ascii)*('}');

Ignored Tokens
 blank,
 comment;
 
 
Productions  
programa =
    {code} code id bloco;
bloco =
    {bloco} start declaracao* comando* finish;

inicialize = recebe_const valor;
declaracao =
     {tipo} tipo multi_id* id ppv
    |{unalt} unalt tipo id inicialize? ppv;

multi_var = var vir;
multi_exp = exp vir;
multi_id = id vir;
multi_pos = l_col exp r_col;

tipo_base = 
     {integer} integer 
    |{real} real 
    |{symbol} symbol;

tipo =
     {tipo_base} tipo_base
    |{vector} tipo_base vector multi_pos+;
 
add_pos =
  {add_pos} l_col number r_col;

var =
   {id} id
  |{idpos} id add_pos+; 

unalt =
     {var} var;

valor =
  |{caractere} char
  |{numero} number
  |{real} float
  |{palavra} string;
 
comando =
     {cpy} var recebe exp ppv 
    |{const} unalt recebe_const ppv
    |{capture} capture l_par multi_var* var r_par ppv
    |{show} show l_par multi_exp* exp r_par ppv
    |{in_case_that} in case that l_par exp r_par do [c1]:comando else? [c2]:comando
    |{as_long_as} [as1]:as long [as2]:as l_par exp r_par do comando  
    |{considering} considering var from [e1]:exp to [e2]:exp by exp do comando
    |{bloco} bloco;

exp =
   {fator} fator  
  |{soma} exp plus fator 
  |{subtracao} exp minus fator 
  |{rec} exp recebe fator
  |{rec_const} exp recebe_const fator
  |{maior} exp greater fator
  |{menor} exp lesser fator
  |{negacao} exp not fator
  |{e} exp and fator
  |{ou} exp or fator
  |{igual} exp twoequal fator
  |{maiorigual} exp goe fator
  |{menorigual} exp loe fator
  |{diferente} exp diff fator; 

fator =
   {termo} termo 
  |{multiplicacao} fator mult termo 
  |{divisao} fator div termo 
  |{modulo} fator mod termo;

termo =
   {valor} valor
  |{var} var
  //|{neg} minus exp
  |{par} l_par exp r_par;  
 Helpers
 digito = ['0' .. '9'];
 letra_min = ['a' .. 'z'];
 letra_mai = ['A' .. 'Z'];
 ascii = [0x0000..0xFFFF];
 binary = [0 .. 1];
 espaco = ' ';
 tab = '	';
 rc = 13;
 nl = 10;
 aspas = ''';

Tokens
 real = 'real';
 integer = 'integer';
 symbol = 'symbol';
 vector = 'vector ';
 code = 'code';
 start = 'start';
 finish = 'finish';
 unalterable = 'unalterable';
 in = 'in';
 case = 'case';
 that = 'that';
 do = 'do';
 else = 'else';
 as = 'as';
 long = 'long';
 considering = 'considering';
 from = 'from';
 to = 'to';
 by = 'by';
 capture = 'capture';
 show = 'show';
 plus = '+';
 minus = '-';
 mult = '*';
 div = '/';
 mod = '%';
 recebe = (':')('=');
 recebe_const = '=';
 greater = '>';
 lesser = '<';
 not = '!';
 and = 'and';
 or = 'or';
 xor = 'xor';
 twoequal = ('=')('=');
 goe = ('>')('=');
 loe = ('<')('=');
 diff = ('!')('=');
 l_par = '(';
 r_par = ')';
 l_com = '{';
 r_com = '}';
 l_col = '[';
 r_col = ']';
 ppv = ';';
 vir = ',';
 id = (letra_min|letra_mai)(letra_min|letra_mai|'_')*;
 char = (aspas)(ascii)(aspas);
 number = (digito+)|(('b')(digito+));
 string = ('"')(ascii)*('"');
 float = (digito+)'.'(digito+);
 blank = (espaco | rc | nl | tab)+;
 comment = ('{')(ascii)*('}');

Ignored Tokens
 blank,
 comment;

Productions
  comando =
    |var recebe ppv
    |var recebe_const exp ppv
    |capture l_par {var vir} var r_par ppv
    |show l_par {exp vir} exp r_par ppv
    |in case that l_par exp r_par do comando
    |else comando
    |as long as l_par exp r_par do comando
    |considering var from exp to exp by exp do comando
    |bloco;
  exp =
    |valor
    |var
    |l_par exp r_par
    |minus exp
    |exp plus exp
    |exp minus exp
    |exp mult exp
    |exp div exp
    |exp mod exp
    |exp twoequal exp
    |exp not recebe_const exp
    |exp loe exp
    |exp goe exp
    |exp lesser exp
    |exp greater exp
    |not exp
    |exp  and exp
    |exp or exp
    |exp xor exp
    |not exp;
  valor =
    |char
    |number
    |float
    |string;
  var =
    |id
    |id l_col number r_col {l_col number r_col}

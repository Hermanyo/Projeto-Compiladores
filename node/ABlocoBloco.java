/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ABlocoBloco extends PBloco
{
    private TStart _start_;
    private final LinkedList<PDeclaracao> _declaracao_ = new LinkedList<PDeclaracao>();
    private final LinkedList<PComando> _comando_ = new LinkedList<PComando>();
    private TFinish _finish_;

    public ABlocoBloco()
    {
        // Constructor
    }

    public ABlocoBloco(
        @SuppressWarnings("hiding") TStart _start_,
        @SuppressWarnings("hiding") List<?> _declaracao_,
        @SuppressWarnings("hiding") List<?> _comando_,
        @SuppressWarnings("hiding") TFinish _finish_)
    {
        // Constructor
        setStart(_start_);

        setDeclaracao(_declaracao_);

        setComando(_comando_);

        setFinish(_finish_);

    }

    @Override
    public Object clone()
    {
        return new ABlocoBloco(
            cloneNode(this._start_),
            cloneList(this._declaracao_),
            cloneList(this._comando_),
            cloneNode(this._finish_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlocoBloco(this);
    }

    public TStart getStart()
    {
        return this._start_;
    }

    public void setStart(TStart node)
    {
        if(this._start_ != null)
        {
            this._start_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._start_ = node;
    }

    public LinkedList<PDeclaracao> getDeclaracao()
    {
        return this._declaracao_;
    }

    public void setDeclaracao(List<?> list)
    {
        for(PDeclaracao e : this._declaracao_)
        {
            e.parent(null);
        }
        this._declaracao_.clear();

        for(Object obj_e : list)
        {
            PDeclaracao e = (PDeclaracao) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._declaracao_.add(e);
        }
    }

    public LinkedList<PComando> getComando()
    {
        return this._comando_;
    }

    public void setComando(List<?> list)
    {
        for(PComando e : this._comando_)
        {
            e.parent(null);
        }
        this._comando_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comando_.add(e);
        }
    }

    public TFinish getFinish()
    {
        return this._finish_;
    }

    public void setFinish(TFinish node)
    {
        if(this._finish_ != null)
        {
            this._finish_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._finish_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._start_)
            + toString(this._declaracao_)
            + toString(this._comando_)
            + toString(this._finish_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._start_ == child)
        {
            this._start_ = null;
            return;
        }

        if(this._declaracao_.remove(child))
        {
            return;
        }

        if(this._comando_.remove(child))
        {
            return;
        }

        if(this._finish_ == child)
        {
            this._finish_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._start_ == oldChild)
        {
            setStart((TStart) newChild);
            return;
        }

        for(ListIterator<PDeclaracao> i = this._declaracao_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclaracao) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PComando> i = this._comando_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._finish_ == oldChild)
        {
            setFinish((TFinish) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class ACaptureComando extends PComando
{
    private TCapture _capture_;
    private TLPar _lPar_;
    private final LinkedList<PMultiVar> _multiVar_ = new LinkedList<PMultiVar>();
    private PVar _var_;
    private TRPar _rPar_;
    private TPpv _ppv_;

    public ACaptureComando()
    {
        // Constructor
    }

    public ACaptureComando(
        @SuppressWarnings("hiding") TCapture _capture_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") List<?> _multiVar_,
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TPpv _ppv_)
    {
        // Constructor
        setCapture(_capture_);

        setLPar(_lPar_);

        setMultiVar(_multiVar_);

        setVar(_var_);

        setRPar(_rPar_);

        setPpv(_ppv_);

    }

    @Override
    public Object clone()
    {
        return new ACaptureComando(
            cloneNode(this._capture_),
            cloneNode(this._lPar_),
            cloneList(this._multiVar_),
            cloneNode(this._var_),
            cloneNode(this._rPar_),
            cloneNode(this._ppv_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACaptureComando(this);
    }

    public TCapture getCapture()
    {
        return this._capture_;
    }

    public void setCapture(TCapture node)
    {
        if(this._capture_ != null)
        {
            this._capture_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._capture_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public LinkedList<PMultiVar> getMultiVar()
    {
        return this._multiVar_;
    }

    public void setMultiVar(List<?> list)
    {
        for(PMultiVar e : this._multiVar_)
        {
            e.parent(null);
        }
        this._multiVar_.clear();

        for(Object obj_e : list)
        {
            PMultiVar e = (PMultiVar) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._multiVar_.add(e);
        }
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TPpv getPpv()
    {
        return this._ppv_;
    }

    public void setPpv(TPpv node)
    {
        if(this._ppv_ != null)
        {
            this._ppv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ppv_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._capture_)
            + toString(this._lPar_)
            + toString(this._multiVar_)
            + toString(this._var_)
            + toString(this._rPar_)
            + toString(this._ppv_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._capture_ == child)
        {
            this._capture_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._multiVar_.remove(child))
        {
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._ppv_ == child)
        {
            this._ppv_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._capture_ == oldChild)
        {
            setCapture((TCapture) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        for(ListIterator<PMultiVar> i = this._multiVar_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMultiVar) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._ppv_ == oldChild)
        {
            setPpv((TPpv) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

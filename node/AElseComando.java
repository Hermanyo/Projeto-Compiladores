/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AElseComando extends PComando
{
    private PComando _c1_;
    private TElse _else_;
    private PComando _c2_;

    public AElseComando()
    {
        // Constructor
    }

    public AElseComando(
        @SuppressWarnings("hiding") PComando _c1_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PComando _c2_)
    {
        // Constructor
        setC1(_c1_);

        setElse(_else_);

        setC2(_c2_);

    }

    @Override
    public Object clone()
    {
        return new AElseComando(
            cloneNode(this._c1_),
            cloneNode(this._else_),
            cloneNode(this._c2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseComando(this);
    }

    public PComando getC1()
    {
        return this._c1_;
    }

    public void setC1(PComando node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PComando getC2()
    {
        return this._c2_;
    }

    public void setC2(PComando node)
    {
        if(this._c2_ != null)
        {
            this._c2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._c1_)
            + toString(this._else_)
            + toString(this._c2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._c2_ == child)
        {
            this._c2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._c1_ == oldChild)
        {
            setC1((PComando) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._c2_ == oldChild)
        {
            setC2((PComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

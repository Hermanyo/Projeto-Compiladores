/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ATest extends PTest
{
    private TElse _else_;
    private PTest _test_;

    public ATest()
    {
        // Constructor
    }

    public ATest(
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PTest _test_)
    {
        // Constructor
        setElse(_else_);

        setTest(_test_);

    }

    @Override
    public Object clone()
    {
        return new ATest(
            cloneNode(this._else_),
            cloneNode(this._test_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATest(this);
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PTest getTest()
    {
        return this._test_;
    }

    public void setTest(PTest node)
    {
        if(this._test_ != null)
        {
            this._test_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._test_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._else_)
            + toString(this._test_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._test_ == child)
        {
            this._test_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._test_ == oldChild)
        {
            setTest((PTest) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

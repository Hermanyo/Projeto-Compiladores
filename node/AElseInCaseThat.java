/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AElseInCaseThat extends PInCaseThat
{
    private TIn _in_;
    private TCase _case_;
    private TThat _that_;
    private TLPar _lPar_;
    private PExp _exp_;
    private TRPar _rPar_;
    private TDo _do_;
    private PComando _first_;
    private TElse _else_;
    private PComando _second_;

    public AElseInCaseThat()
    {
        // Constructor
    }

    public AElseInCaseThat(
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") TCase _case_,
        @SuppressWarnings("hiding") TThat _that_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PComando _first_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PComando _second_)
    {
        // Constructor
        setIn(_in_);

        setCase(_case_);

        setThat(_that_);

        setLPar(_lPar_);

        setExp(_exp_);

        setRPar(_rPar_);

        setDo(_do_);

        setFirst(_first_);

        setElse(_else_);

        setSecond(_second_);

    }

    @Override
    public Object clone()
    {
        return new AElseInCaseThat(
            cloneNode(this._in_),
            cloneNode(this._case_),
            cloneNode(this._that_),
            cloneNode(this._lPar_),
            cloneNode(this._exp_),
            cloneNode(this._rPar_),
            cloneNode(this._do_),
            cloneNode(this._first_),
            cloneNode(this._else_),
            cloneNode(this._second_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseInCaseThat(this);
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public TCase getCase()
    {
        return this._case_;
    }

    public void setCase(TCase node)
    {
        if(this._case_ != null)
        {
            this._case_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._case_ = node;
    }

    public TThat getThat()
    {
        return this._that_;
    }

    public void setThat(TThat node)
    {
        if(this._that_ != null)
        {
            this._that_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._that_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PComando getFirst()
    {
        return this._first_;
    }

    public void setFirst(PComando node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PComando getSecond()
    {
        return this._second_;
    }

    public void setSecond(PComando node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._in_)
            + toString(this._case_)
            + toString(this._that_)
            + toString(this._lPar_)
            + toString(this._exp_)
            + toString(this._rPar_)
            + toString(this._do_)
            + toString(this._first_)
            + toString(this._else_)
            + toString(this._second_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._case_ == child)
        {
            this._case_ = null;
            return;
        }

        if(this._that_ == child)
        {
            this._that_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(this._case_ == oldChild)
        {
            setCase((TCase) newChild);
            return;
        }

        if(this._that_ == oldChild)
        {
            setThat((TThat) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._first_ == oldChild)
        {
            setFirst((PComando) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((PComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
